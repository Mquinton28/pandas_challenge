 1/1:
# Running the basic "Hello World" code
hello = "Hello World"
print(hello)
 1/2:
# Doing simple math
4 + 4
 1/3:
# Storing results in variables
a = 5
 1/4:
# Using those variables elsewhere in the code
a
 1/5:
# Running the basic "Hello World" code
hello = "Hello World"
print(hello)
 2/1:
# Running the basic "Hello World" code
hello = "Hello World"
print(hello)
 2/2:
# Doing simple math
4 + 4
 2/3:
# Storing results in variables
a = 5
 2/4:
# Using those variables elsewhere in the code
a
 2/5:
# Variables will hold the value most recently run
# This means that, if we run the code above, it will now print 2
a = 2
 3/1:
# Running the basic "Hello World" code
hello = "Hello World"
print(hello)
 3/2:
# Doing simple math
4 + 4
 3/3:
# Storing results in variables
a = 5
 3/4:
# Using those variables elsewhere in the code
a
 3/5:
# Variables will hold the value most recently run
# This means that, if we run the code above, it will now print 2
a = 2
 5/1:
# Modules
import os
import csv
 5/2: video = input("What show or movie are you looking for? ")
 5/3: csvpath = os.path.join("Resources", "netflix_ratings.csv")
 5/4: found = False
 5/5:
for row in csvreader:
        if row[0] == video:
            print(row[0] + " is rated " + row[1] + " with a rating of " + row[6])
 5/6:
for row in csvreader:
        if row[0] == video:
            print(row[0] + " is rated " + row[1] + " with a rating of " + row[6])
 5/7:
for row in csvreader:
        if row[0] == video:
            print(row[0] + " is rated " + row[1] + " with a rating of " + row[6])
 6/1:
# Modules
import os
import csv
 6/2: video = input("What show or movie are you looking for? ")
 6/3: csvpath = os.path.join("Resources", "netflix_ratings.csv")
 6/4: found = False
 6/5:
with open(csvpath) as csvfile:
    csvreader = csv.reader(csvfile, delimiter=",")
 6/6:
for row in csvreader:
        if row[0] == video:
            print(row[0] + " is rated " + row[1] + " with a rating of " + row[6])
11/1:
# Modules
import os
import csv
11/2: video = input("What show or movie are you looking for? ")
11/3: csvpath = os.path.join("Resources", "netflix_ratings.csv")
11/4: found = False
11/5:
with open(csvpath) as csvfile:
    csvreader = csv.reader(csvfile, delimiter=",")
11/6:
for row in csvreader:
        if row[0] == video:
            print(row[0] + " is rated " + row[1] + " with a rating of " + row[6])
11/7:
# Modules
import os
import csv
11/8: video = input("What show or movie are you looking for? ")
13/1:
# Modules
import os
import csv
13/2: video = input("What show or movie are you looking for? ")
13/3: csvpath = os.path.join("Resources", "netflix_ratings.csv")
13/4: found = False
13/5:
with open(csvpath) as csvfile:
    csvreader = csv.reader(csvfile, delimiter=",")
13/6:
for row in csvreader:
        if row[0] == video:
            print(row[0] + " is rated " + row[1] + " with a rating of " + row[6])
13/7:
# Modules
import os
import csv
13/8: video = input("What show or movie are you looking for? ")
13/9: csvpath = os.path.join("Resources", "netflix_ratings.csv")
13/10: found = False
13/11:
with open(csvpath) as csvfile:
    csvreader = csv.reader(csvfile, delimiter=",")
13/12:
for row in csvreader:
        if row[0] == video:
            print(row[0] + " is rated " + row[1] + " with a rating of " + row[6])
14/1:
# Modules
import os
import csv
14/2: video = input("What show or movie are you looking for? ")
14/3: csvpath = os.path.join("Resources", "netflix_ratings.csv")
14/4: found = False
14/5:
with open(csvpath) as csvfile:
    csvreader = csv.reader(csvfile, delimiter=",")
14/6:
for row in csvreader:
        if row[0] == video:
            print(row[0] + " is rated " + row[1] + " with a rating of " + row[6])
15/1:
# Modules
import os
import csv
15/2: video = input("What show or movie are you looking for? ")
15/3: csvpath = os.path.join("Resources", "netflix_ratings.csv")
15/4: found = False
15/5:
with open(csvpath) as csvfile:
    csvreader = csv.reader(csvfile, delimiter=",")
15/6:
for row in csvreader:
        if row[0] == video:
            print(row[0] + " is rated " + row[1] + " with a rating of " + row[6])
16/1:
# Modules
import os
import csv
16/2: video = input("What show or movie are you looking for? ")
16/3: csvpath = os.path.join("Resources", "netflix_ratings.csv")
16/4: found = False
16/5:
with open(csvpath) as csvfile:
    csvreader = csv.reader(csvfile, delimiter=",")
16/6:
for row in csvreader:
        if row[0] == video:
            print(row[0] + " is rated " + row[1] + " with a rating of " + row[6])
            
            found = True
            
        if found is False:
             print("Sorry about this, we don't seem to have what you are looking for!")
17/1:
# Modules
import os
import csv
17/2: video = input("What show or movie are you looking for? ")
17/3: csvpath = os.path.join("Resources", "netflix_ratings.csv")
17/4: found = False
17/5:
with open(csvpath) as csvfile:
    csvreader = csv.reader(csvfile, delimiter=",")
17/6:
# Open the CSV
with open(csvpath) as csvfile:
    csvreader = csv.reader(csvfile, delimiter=",")

    # Loop through looking for the video
    for row in csvreader:
        if row[0] == video:
            print(row[0] + " is rated " + row[1] + " with a rating of " + row[6])

            # Set variable to confirm we have found the video
            found = True

    # If the video is never found, alert the user
    if found is False:
        print("Sorry about this, we don't seem to have what you are looking for!")
20/1:
# DataFrame should have 3 columns: Frame, Price, and Sales AND 5 rows of data
frame_dicts = [{"Frame": "Ornate", "Price": "15.0", "Sales": "100"},
              {"Frame": "Classical", "Price": "12.5", "Sales": "200"},
             {"Frame": "Modern", "Price": "10.0", "Sales": "150"},
             {"Frame": "Wood", "Price": "5.0", "Sales": "300"},
             {"Frame": "Cardboard", "Price": "1.0", "Sales": "N/A"}]

frame_df = pd.DataFrame(frame_dicts)
frame_df
20/2:
# Use a different method of creating DataFrames to
# Create a DataFrame for an art gallery that contains three columns - "Painting", "Price", and "Popularity"
# and has 4 rows of data
frametypes_df = pd.DataFrame({"Painting": ["Mona Lisa(Knockoff)", "Van Gough(Knockoff)", "Starving Artist", "Toddler Drawing"],
                            "Popularity": ["Very Popular", "Popular", "Average", "Not Popular"],
                             "Price": ["25", "20", "10", "1"]})
frametypes_df
20/3:
# Create a DataFrame of frames using a dictionary of lists
frame_df = pd.DataFrame({
    "Frame": ["Ornate", "Classical", "Modern", "Wood", "Cardboard"],
    "Price": [15.00, 12.50, 10.00, 5.00, 1.00],
    "Sales": [100, 200, 150, 300, "N/A"]
})
frame_df
20/4:
# Create a DataFrame of frames using a dictionary of lists
frame_df = pd.DataFrame({
    "Frame": ["Ornate", "Classical", "Modern", "Wood", "Cardboard"],
    "Price": [15.00, 12.50, 10.00, 5.00, 1.00],
    "Sales": [100, 200, 150, 300, "N/A"]
})
frame_df
22/1:
# Import Dependencies
import pandas as pd
22/2:
# Create a DataFrame of frames using a dictionary of lists
frame_df = pd.DataFrame({
    "Frame": ["Ornate", "Classical", "Modern", "Wood", "Cardboard"],
    "Price": [15.00, 12.50, 10.00, 5.00, 1.00],
    "Sales": [100, 200, 150, 300, "N/A"]
})
frame_df
22/3:
# Create a DataFrame of paintings using a list of dictionaries
painting_df = pd.DataFrame([
    {"Painting": "Mona Lisa (Knockoff)", "Price": 25,
     "Popularity": "Very Popular"},
    {"Painting": "Van Gogh (Knockoff)", "Price": 20, "Popularity": "Popular"},
    {"Painting": "Starving Artist", "Price": 10, "Popularity": "Average"},
    {"Painting": "Toddler Drawing", "Price": 1, "Popularity": "Not Popular"}
])
painting_df
23/1:
# Collecting a summary of all numeric data
training_df.describe()
23/2:
# Collecting a summary of all numeric data
training_df.describe()
25/1:
# Import Dependencies
import pandas as pd
25/2:
# A gigantic DataFrame of individuals' names, their trainers, their weight, and their days as gym members
training_df = pd.DataFrame({
    "Name":["Gino Walker","Hiedi Wasser","Kerrie Wetzel","Elizabeth Sackett","Jack Mitten","Madalene Wayman","Jamee Horvath","Arlena Reddin","Tula Levan","Teisha Dreier","Leslie Carrier","Arlette Hartson","Romana Merkle","Heath Viviani","Andres Zimmer","Allyson Osman","Yadira Caggiano","Jeanmarie Friedrichs","Leann Ussery","Bee Mom","Pandora Charland","Karena Wooten","Elizabet Albanese","Augusta Borjas","Erma Yadon","Belia Lenser","Karmen Sancho","Edison Mannion","Sonja Hornsby","Morgan Frei","Florencio Murphy","Christoper Hertel","Thalia Stepney","Tarah Argento","Nicol Canfield","Pok Moretti","Barbera Stallings","Muoi Kelso","Cicely Ritz","Sid Demelo","Eura Langan","Vanita An","Frieda Fuhr","Ernest Fitzhenry","Ashlyn Tash","Melodi Mclendon","Rochell Leblanc","Jacqui Reasons","Freeda Mccroy","Vanna Runk","Florinda Milot","Cierra Lecompte","Nancey Kysar","Latasha Dalton","Charlyn Rinaldi","Erline Averett","Mariko Hillary","Rosalyn Trigg","Sherwood Brauer","Hortencia Olesen","Delana Kohut","Geoffrey Mcdade","Iona Delancey","Donnie Read","Cesar Bhatia","Evia Slate","Kaye Hugo","Denise Vento","Lang Kittle","Sherry Whittenberg","Jodi Bracero","Tamera Linneman","Katheryn Koelling","Tonia Shorty","Misha Baxley","Lisbeth Goering","Merle Ladwig","Tammie Omar","Jesusa Avilla","Alda Zabala","Junita Dogan","Jessia Anglin","Peggie Scranton","Dania Clodfelter","Janis Mccarthy","Edmund Galusha","Tonisha Posey","Arvilla Medley","Briana Barbour","Delfina Kiger","Nia Lenig","Ricarda Bulow","Odell Carson","Nydia Clonts","Andree Resendez","Daniela Puma","Sherill Paavola","Gilbert Bloomquist","Shanon Mach","Justin Bangert","Arden Hokanson","Evelyne Bridge","Hee Simek","Ward Deangelis","Jodie Childs","Janis Boehme","Beaulah Glowacki","Denver Stoneham","Tarra Vinton","Deborah Hummell","Ulysses Neil","Kathryn Marques","Rosanna Dake","Gavin Wheat","Tameka Stoke","Janella Clear","Kaye Ciriaco","Suk Bloxham","Gracia Whaley","Philomena Hemingway","Claudette Vaillancourt","Olevia Piche","Trey Chiles","Idalia Scardina","Jenine Tremble","Herbert Krider","Alycia Schrock","Miss Weibel","Pearlene Neidert","Kina Callender","Charlotte Skelley","Theodora Harrigan","Sydney Shreffler","Annamae Trinidad","Tobi Mumme","Rosia Elliot","Debbra Putt","Rena Delosantos","Genna Grennan","Nieves Huf","Berry Lugo","Ayana Verdugo","Joaquin Mazzei","Doris Harmon","Patience Poss","Magaret Zabel","Marylynn Hinojos","Earlene Marcantel","Yuki Evensen","Rema Gay","Delana Haak","Patricia Fetters","Vinnie Elrod","Octavia Bellew","Burma Revard","Lakenya Kato","Vinita Buchner","Sierra Margulies","Shae Funderburg","Jenae Groleau","Louetta Howie","Astrid Duffer","Caron Altizer","Kymberly Amavisca","Mohammad Diedrich","Thora Wrinkle","Bethel Wiemann","Patria Millet","Eldridge Burbach","Alyson Eddie","Zula Hanna","Devin Goodwin","Felipa Kirkwood","Kurtis Kempf","Kasey Lenart","Deena Blankenship","Kandra Wargo","Sherrie Cieslak","Ron Atha","Reggie Barreiro","Daria Saulter","Tandra Eastman","Donnell Lucious","Talisha Rosner","Emiko Bergh","Terresa Launius","Margy Hoobler","Marylou Stelling","Lavonne Justice","Kala Langstaff","China Truett","Louanne Dussault","Thomasena Samaniego","Charlesetta Tarbell","Fatimah Lade","Malisa Cantero","Florencia Litten","Francina Fraise","Patsy London","Deloris Mclaughlin"],
    "Trainer":['Bettyann Savory','Mariah Barberio','Gordon Perrine','Pa Dargan','Blanch Victoria','Aldo Byler','Aldo Byler','Williams Camire','Junie Ritenour','Gordon Perrine','Bettyann Savory','Mariah Barberio','Aldo Byler','Barton Stecklein','Bettyann Savory','Barton Stecklein','Gordon Perrine','Pa Dargan','Aldo Byler','Brittani Brin','Bettyann Savory','Phyliss Houk','Bettyann Savory','Junie Ritenour','Aldo Byler','Calvin North','Brittani Brin','Junie Ritenour','Blanch Victoria','Brittani Brin','Bettyann Savory','Blanch Victoria','Mariah Barberio','Bettyann Savory','Blanch Victoria','Brittani Brin','Junie Ritenour','Pa Dargan','Gordon Perrine','Phyliss Houk','Pa Dargan','Mariah Barberio','Phyliss Houk','Phyliss Houk','Calvin North','Williams Camire','Brittani Brin','Gordon Perrine','Bettyann Savory','Bettyann Savory','Pa Dargan','Phyliss Houk','Barton Stecklein','Blanch Victoria','Coleman Dunmire','Phyliss Houk','Blanch Victoria','Pa Dargan','Harland Coolidge','Calvin North','Bettyann Savory','Phyliss Houk','Bettyann Savory','Harland Coolidge','Gordon Perrine','Junie Ritenour','Harland Coolidge','Blanch Victoria','Mariah Barberio','Coleman Dunmire','Aldo Byler','Bettyann Savory','Gordon Perrine','Bettyann Savory','Barton Stecklein','Harland Coolidge','Aldo Byler','Aldo Byler','Pa Dargan','Junie Ritenour','Brittani Brin','Junie Ritenour','Gordon Perrine','Mariah Barberio','Mariah Barberio','Mariah Barberio','Bettyann Savory','Brittani Brin','Aldo Byler','Phyliss Houk','Blanch Victoria','Pa Dargan','Phyliss Houk','Brittani Brin','Barton Stecklein','Coleman Dunmire','Bettyann Savory','Bettyann Savory','Gordon Perrine','Blanch Victoria','Junie Ritenour','Phyliss Houk','Coleman Dunmire','Williams Camire','Harland Coolidge','Williams Camire','Aldo Byler','Harland Coolidge','Gordon Perrine','Brittani Brin','Coleman Dunmire','Calvin North','Phyliss Houk','Brittani Brin','Aldo Byler','Bettyann Savory','Brittani Brin','Gordon Perrine','Calvin North','Harland Coolidge','Coleman Dunmire','Harland Coolidge','Aldo Byler','Junie Ritenour','Blanch Victoria','Harland Coolidge','Blanch Victoria','Junie Ritenour','Harland Coolidge','Junie Ritenour','Gordon Perrine','Brittani Brin','Coleman Dunmire','Williams Camire','Junie Ritenour','Brittani Brin','Calvin North','Barton Stecklein','Barton Stecklein','Mariah Barberio','Coleman Dunmire','Bettyann Savory','Mariah Barberio','Pa Dargan','Barton Stecklein','Coleman Dunmire','Brittani Brin','Barton Stecklein','Pa Dargan','Barton Stecklein','Junie Ritenour','Bettyann Savory','Williams Camire','Pa Dargan','Calvin North','Williams Camire','Coleman Dunmire','Aldo Byler','Barton Stecklein','Coleman Dunmire','Blanch Victoria','Mariah Barberio','Mariah Barberio','Harland Coolidge','Barton Stecklein','Phyliss Houk','Pa Dargan','Bettyann Savory','Barton Stecklein','Harland Coolidge','Junie Ritenour','Pa Dargan','Mariah Barberio','Blanch Victoria','Williams Camire','Phyliss Houk','Phyliss Houk','Coleman Dunmire','Mariah Barberio','Gordon Perrine','Coleman Dunmire','Brittani Brin','Pa Dargan','Coleman Dunmire','Brittani Brin','Blanch Victoria','Coleman Dunmire','Gordon Perrine','Coleman Dunmire','Aldo Byler','Aldo Byler','Mariah Barberio','Williams Camire','Phyliss Houk','Aldo Byler','Williams Camire','Aldo Byler','Williams Camire','Coleman Dunmire','Phyliss Houk'],
    "Weight":[128,180,193,177,237,166,224,208,177,241,114,161,162,151,220,142,193,193,124,130,132,141,190,239,213,131,172,127,184,157,215,122,181,240,218,205,239,217,234,158,180,131,194,171,177,110,117,114,217,123,248,189,198,127,182,121,224,111,151,170,188,150,137,231,222,186,139,175,178,246,150,154,129,216,144,198,228,183,173,129,157,199,186,232,172,157,246,239,214,161,132,208,187,224,164,177,175,224,219,235,112,241,243,179,208,196,131,207,182,233,191,162,173,197,190,182,231,196,196,143,250,174,138,135,164,204,235,192,114,179,215,127,185,213,250,213,153,217,176,190,119,167,118,208,113,206,200,236,159,218,168,159,156,183,121,203,215,209,179,219,174,220,129,188,217,250,166,157,112,236,182,144,189,243,238,147,165,115,160,134,245,174,238,157,150,184,174,134,134,248,199,165,117,119,162,112,170,224,247,217],
    "Membership(Days)":[52,70,148,124,186,157,127,155,37,185,158,129,93,69,124,13,76,153,164,161,48,121,167,69,39,163,7,34,176,169,108,162,195,86,155,77,197,200,80,142,179,67,58,145,188,147,125,15,13,173,125,4,61,29,132,110,62,137,197,135,162,174,32,151,149,65,18,42,63,62,104,200,189,40,38,199,1,12,8,2,195,30,7,72,130,144,2,34,200,143,43,196,22,115,171,54,143,59,14,52,109,115,187,185,26,19,178,18,120,169,45,52,130,69,168,178,96,22,78,152,39,51,118,130,60,156,108,69,103,158,165,142,86,91,117,77,57,169,86,188,97,111,22,83,81,177,163,35,12,164,21,181,171,138,22,107,58,51,38,128,19,193,157,13,104,89,13,10,26,190,179,101,7,159,100,49,120,109,56,199,51,108,47,171,69,162,74,119,148,88,32,159,65,146,140,171,88,18,59,13]
})
training_df.head(10)
25/3:
# Collecting a summary of all numeric data
training_df.describe()
25/4: # Finding the names of the trainers
25/5: # Finding how many students each trainer has
25/6: # Finding the average weight of all students
25/7: # Finding the combined weight of all students
25/8: # Converting the membership days into weeks and then adding a column to the DataFrame
26/1:
# Import Dependencies
import pandas as pd
26/2:
# A gigantic DataFrame of individuals' names, their trainers, their weight, and their days as gym members
training_df = pd.DataFrame({
    "Name":["Gino Walker","Hiedi Wasser","Kerrie Wetzel","Elizabeth Sackett","Jack Mitten","Madalene Wayman","Jamee Horvath","Arlena Reddin","Tula Levan","Teisha Dreier","Leslie Carrier","Arlette Hartson","Romana Merkle","Heath Viviani","Andres Zimmer","Allyson Osman","Yadira Caggiano","Jeanmarie Friedrichs","Leann Ussery","Bee Mom","Pandora Charland","Karena Wooten","Elizabet Albanese","Augusta Borjas","Erma Yadon","Belia Lenser","Karmen Sancho","Edison Mannion","Sonja Hornsby","Morgan Frei","Florencio Murphy","Christoper Hertel","Thalia Stepney","Tarah Argento","Nicol Canfield","Pok Moretti","Barbera Stallings","Muoi Kelso","Cicely Ritz","Sid Demelo","Eura Langan","Vanita An","Frieda Fuhr","Ernest Fitzhenry","Ashlyn Tash","Melodi Mclendon","Rochell Leblanc","Jacqui Reasons","Freeda Mccroy","Vanna Runk","Florinda Milot","Cierra Lecompte","Nancey Kysar","Latasha Dalton","Charlyn Rinaldi","Erline Averett","Mariko Hillary","Rosalyn Trigg","Sherwood Brauer","Hortencia Olesen","Delana Kohut","Geoffrey Mcdade","Iona Delancey","Donnie Read","Cesar Bhatia","Evia Slate","Kaye Hugo","Denise Vento","Lang Kittle","Sherry Whittenberg","Jodi Bracero","Tamera Linneman","Katheryn Koelling","Tonia Shorty","Misha Baxley","Lisbeth Goering","Merle Ladwig","Tammie Omar","Jesusa Avilla","Alda Zabala","Junita Dogan","Jessia Anglin","Peggie Scranton","Dania Clodfelter","Janis Mccarthy","Edmund Galusha","Tonisha Posey","Arvilla Medley","Briana Barbour","Delfina Kiger","Nia Lenig","Ricarda Bulow","Odell Carson","Nydia Clonts","Andree Resendez","Daniela Puma","Sherill Paavola","Gilbert Bloomquist","Shanon Mach","Justin Bangert","Arden Hokanson","Evelyne Bridge","Hee Simek","Ward Deangelis","Jodie Childs","Janis Boehme","Beaulah Glowacki","Denver Stoneham","Tarra Vinton","Deborah Hummell","Ulysses Neil","Kathryn Marques","Rosanna Dake","Gavin Wheat","Tameka Stoke","Janella Clear","Kaye Ciriaco","Suk Bloxham","Gracia Whaley","Philomena Hemingway","Claudette Vaillancourt","Olevia Piche","Trey Chiles","Idalia Scardina","Jenine Tremble","Herbert Krider","Alycia Schrock","Miss Weibel","Pearlene Neidert","Kina Callender","Charlotte Skelley","Theodora Harrigan","Sydney Shreffler","Annamae Trinidad","Tobi Mumme","Rosia Elliot","Debbra Putt","Rena Delosantos","Genna Grennan","Nieves Huf","Berry Lugo","Ayana Verdugo","Joaquin Mazzei","Doris Harmon","Patience Poss","Magaret Zabel","Marylynn Hinojos","Earlene Marcantel","Yuki Evensen","Rema Gay","Delana Haak","Patricia Fetters","Vinnie Elrod","Octavia Bellew","Burma Revard","Lakenya Kato","Vinita Buchner","Sierra Margulies","Shae Funderburg","Jenae Groleau","Louetta Howie","Astrid Duffer","Caron Altizer","Kymberly Amavisca","Mohammad Diedrich","Thora Wrinkle","Bethel Wiemann","Patria Millet","Eldridge Burbach","Alyson Eddie","Zula Hanna","Devin Goodwin","Felipa Kirkwood","Kurtis Kempf","Kasey Lenart","Deena Blankenship","Kandra Wargo","Sherrie Cieslak","Ron Atha","Reggie Barreiro","Daria Saulter","Tandra Eastman","Donnell Lucious","Talisha Rosner","Emiko Bergh","Terresa Launius","Margy Hoobler","Marylou Stelling","Lavonne Justice","Kala Langstaff","China Truett","Louanne Dussault","Thomasena Samaniego","Charlesetta Tarbell","Fatimah Lade","Malisa Cantero","Florencia Litten","Francina Fraise","Patsy London","Deloris Mclaughlin"],
    "Trainer":['Bettyann Savory','Mariah Barberio','Gordon Perrine','Pa Dargan','Blanch Victoria','Aldo Byler','Aldo Byler','Williams Camire','Junie Ritenour','Gordon Perrine','Bettyann Savory','Mariah Barberio','Aldo Byler','Barton Stecklein','Bettyann Savory','Barton Stecklein','Gordon Perrine','Pa Dargan','Aldo Byler','Brittani Brin','Bettyann Savory','Phyliss Houk','Bettyann Savory','Junie Ritenour','Aldo Byler','Calvin North','Brittani Brin','Junie Ritenour','Blanch Victoria','Brittani Brin','Bettyann Savory','Blanch Victoria','Mariah Barberio','Bettyann Savory','Blanch Victoria','Brittani Brin','Junie Ritenour','Pa Dargan','Gordon Perrine','Phyliss Houk','Pa Dargan','Mariah Barberio','Phyliss Houk','Phyliss Houk','Calvin North','Williams Camire','Brittani Brin','Gordon Perrine','Bettyann Savory','Bettyann Savory','Pa Dargan','Phyliss Houk','Barton Stecklein','Blanch Victoria','Coleman Dunmire','Phyliss Houk','Blanch Victoria','Pa Dargan','Harland Coolidge','Calvin North','Bettyann Savory','Phyliss Houk','Bettyann Savory','Harland Coolidge','Gordon Perrine','Junie Ritenour','Harland Coolidge','Blanch Victoria','Mariah Barberio','Coleman Dunmire','Aldo Byler','Bettyann Savory','Gordon Perrine','Bettyann Savory','Barton Stecklein','Harland Coolidge','Aldo Byler','Aldo Byler','Pa Dargan','Junie Ritenour','Brittani Brin','Junie Ritenour','Gordon Perrine','Mariah Barberio','Mariah Barberio','Mariah Barberio','Bettyann Savory','Brittani Brin','Aldo Byler','Phyliss Houk','Blanch Victoria','Pa Dargan','Phyliss Houk','Brittani Brin','Barton Stecklein','Coleman Dunmire','Bettyann Savory','Bettyann Savory','Gordon Perrine','Blanch Victoria','Junie Ritenour','Phyliss Houk','Coleman Dunmire','Williams Camire','Harland Coolidge','Williams Camire','Aldo Byler','Harland Coolidge','Gordon Perrine','Brittani Brin','Coleman Dunmire','Calvin North','Phyliss Houk','Brittani Brin','Aldo Byler','Bettyann Savory','Brittani Brin','Gordon Perrine','Calvin North','Harland Coolidge','Coleman Dunmire','Harland Coolidge','Aldo Byler','Junie Ritenour','Blanch Victoria','Harland Coolidge','Blanch Victoria','Junie Ritenour','Harland Coolidge','Junie Ritenour','Gordon Perrine','Brittani Brin','Coleman Dunmire','Williams Camire','Junie Ritenour','Brittani Brin','Calvin North','Barton Stecklein','Barton Stecklein','Mariah Barberio','Coleman Dunmire','Bettyann Savory','Mariah Barberio','Pa Dargan','Barton Stecklein','Coleman Dunmire','Brittani Brin','Barton Stecklein','Pa Dargan','Barton Stecklein','Junie Ritenour','Bettyann Savory','Williams Camire','Pa Dargan','Calvin North','Williams Camire','Coleman Dunmire','Aldo Byler','Barton Stecklein','Coleman Dunmire','Blanch Victoria','Mariah Barberio','Mariah Barberio','Harland Coolidge','Barton Stecklein','Phyliss Houk','Pa Dargan','Bettyann Savory','Barton Stecklein','Harland Coolidge','Junie Ritenour','Pa Dargan','Mariah Barberio','Blanch Victoria','Williams Camire','Phyliss Houk','Phyliss Houk','Coleman Dunmire','Mariah Barberio','Gordon Perrine','Coleman Dunmire','Brittani Brin','Pa Dargan','Coleman Dunmire','Brittani Brin','Blanch Victoria','Coleman Dunmire','Gordon Perrine','Coleman Dunmire','Aldo Byler','Aldo Byler','Mariah Barberio','Williams Camire','Phyliss Houk','Aldo Byler','Williams Camire','Aldo Byler','Williams Camire','Coleman Dunmire','Phyliss Houk'],
    "Weight":[128,180,193,177,237,166,224,208,177,241,114,161,162,151,220,142,193,193,124,130,132,141,190,239,213,131,172,127,184,157,215,122,181,240,218,205,239,217,234,158,180,131,194,171,177,110,117,114,217,123,248,189,198,127,182,121,224,111,151,170,188,150,137,231,222,186,139,175,178,246,150,154,129,216,144,198,228,183,173,129,157,199,186,232,172,157,246,239,214,161,132,208,187,224,164,177,175,224,219,235,112,241,243,179,208,196,131,207,182,233,191,162,173,197,190,182,231,196,196,143,250,174,138,135,164,204,235,192,114,179,215,127,185,213,250,213,153,217,176,190,119,167,118,208,113,206,200,236,159,218,168,159,156,183,121,203,215,209,179,219,174,220,129,188,217,250,166,157,112,236,182,144,189,243,238,147,165,115,160,134,245,174,238,157,150,184,174,134,134,248,199,165,117,119,162,112,170,224,247,217],
    "Membership(Days)":[52,70,148,124,186,157,127,155,37,185,158,129,93,69,124,13,76,153,164,161,48,121,167,69,39,163,7,34,176,169,108,162,195,86,155,77,197,200,80,142,179,67,58,145,188,147,125,15,13,173,125,4,61,29,132,110,62,137,197,135,162,174,32,151,149,65,18,42,63,62,104,200,189,40,38,199,1,12,8,2,195,30,7,72,130,144,2,34,200,143,43,196,22,115,171,54,143,59,14,52,109,115,187,185,26,19,178,18,120,169,45,52,130,69,168,178,96,22,78,152,39,51,118,130,60,156,108,69,103,158,165,142,86,91,117,77,57,169,86,188,97,111,22,83,81,177,163,35,12,164,21,181,171,138,22,107,58,51,38,128,19,193,157,13,104,89,13,10,26,190,179,101,7,159,100,49,120,109,56,199,51,108,47,171,69,162,74,119,148,88,32,159,65,146,140,171,88,18,59,13]
})
training_df.head(10)
26/3:
# Collecting a summary of all numeric data
training_df.describe()
26/4:
# Finding the names of the trainers
unique = training_df["Name"].unique()
unique
26/5:
# Finding how many students each trainer has
count = training_df["Trainer"].value_counts()
count
26/6:
# Finding the average weight of all students
average = training_df["Weight"].mean()
average
26/7:
# Finding the combined weight of all students
total = training_df["Weight"].sum()
26/8: # Converting the membership days into weeks and then adding a column to the DataFrame
26/9:
# Finding the combined weight of all students
total = training_df["Weight"].sum()
total
28/1:
# Import Dependencies
import pandas as pd
28/2:
# A gigantic DataFrame of individuals' names, their trainers, their weight, and their days as gym members
training_df = pd.DataFrame({
    "Name":["Gino Walker","Hiedi Wasser","Kerrie Wetzel","Elizabeth Sackett","Jack Mitten","Madalene Wayman","Jamee Horvath","Arlena Reddin","Tula Levan","Teisha Dreier","Leslie Carrier","Arlette Hartson","Romana Merkle","Heath Viviani","Andres Zimmer","Allyson Osman","Yadira Caggiano","Jeanmarie Friedrichs","Leann Ussery","Bee Mom","Pandora Charland","Karena Wooten","Elizabet Albanese","Augusta Borjas","Erma Yadon","Belia Lenser","Karmen Sancho","Edison Mannion","Sonja Hornsby","Morgan Frei","Florencio Murphy","Christoper Hertel","Thalia Stepney","Tarah Argento","Nicol Canfield","Pok Moretti","Barbera Stallings","Muoi Kelso","Cicely Ritz","Sid Demelo","Eura Langan","Vanita An","Frieda Fuhr","Ernest Fitzhenry","Ashlyn Tash","Melodi Mclendon","Rochell Leblanc","Jacqui Reasons","Freeda Mccroy","Vanna Runk","Florinda Milot","Cierra Lecompte","Nancey Kysar","Latasha Dalton","Charlyn Rinaldi","Erline Averett","Mariko Hillary","Rosalyn Trigg","Sherwood Brauer","Hortencia Olesen","Delana Kohut","Geoffrey Mcdade","Iona Delancey","Donnie Read","Cesar Bhatia","Evia Slate","Kaye Hugo","Denise Vento","Lang Kittle","Sherry Whittenberg","Jodi Bracero","Tamera Linneman","Katheryn Koelling","Tonia Shorty","Misha Baxley","Lisbeth Goering","Merle Ladwig","Tammie Omar","Jesusa Avilla","Alda Zabala","Junita Dogan","Jessia Anglin","Peggie Scranton","Dania Clodfelter","Janis Mccarthy","Edmund Galusha","Tonisha Posey","Arvilla Medley","Briana Barbour","Delfina Kiger","Nia Lenig","Ricarda Bulow","Odell Carson","Nydia Clonts","Andree Resendez","Daniela Puma","Sherill Paavola","Gilbert Bloomquist","Shanon Mach","Justin Bangert","Arden Hokanson","Evelyne Bridge","Hee Simek","Ward Deangelis","Jodie Childs","Janis Boehme","Beaulah Glowacki","Denver Stoneham","Tarra Vinton","Deborah Hummell","Ulysses Neil","Kathryn Marques","Rosanna Dake","Gavin Wheat","Tameka Stoke","Janella Clear","Kaye Ciriaco","Suk Bloxham","Gracia Whaley","Philomena Hemingway","Claudette Vaillancourt","Olevia Piche","Trey Chiles","Idalia Scardina","Jenine Tremble","Herbert Krider","Alycia Schrock","Miss Weibel","Pearlene Neidert","Kina Callender","Charlotte Skelley","Theodora Harrigan","Sydney Shreffler","Annamae Trinidad","Tobi Mumme","Rosia Elliot","Debbra Putt","Rena Delosantos","Genna Grennan","Nieves Huf","Berry Lugo","Ayana Verdugo","Joaquin Mazzei","Doris Harmon","Patience Poss","Magaret Zabel","Marylynn Hinojos","Earlene Marcantel","Yuki Evensen","Rema Gay","Delana Haak","Patricia Fetters","Vinnie Elrod","Octavia Bellew","Burma Revard","Lakenya Kato","Vinita Buchner","Sierra Margulies","Shae Funderburg","Jenae Groleau","Louetta Howie","Astrid Duffer","Caron Altizer","Kymberly Amavisca","Mohammad Diedrich","Thora Wrinkle","Bethel Wiemann","Patria Millet","Eldridge Burbach","Alyson Eddie","Zula Hanna","Devin Goodwin","Felipa Kirkwood","Kurtis Kempf","Kasey Lenart","Deena Blankenship","Kandra Wargo","Sherrie Cieslak","Ron Atha","Reggie Barreiro","Daria Saulter","Tandra Eastman","Donnell Lucious","Talisha Rosner","Emiko Bergh","Terresa Launius","Margy Hoobler","Marylou Stelling","Lavonne Justice","Kala Langstaff","China Truett","Louanne Dussault","Thomasena Samaniego","Charlesetta Tarbell","Fatimah Lade","Malisa Cantero","Florencia Litten","Francina Fraise","Patsy London","Deloris Mclaughlin"],
    "Trainer":['Bettyann Savory','Mariah Barberio','Gordon Perrine','Pa Dargan','Blanch Victoria','Aldo Byler','Aldo Byler','Williams Camire','Junie Ritenour','Gordon Perrine','Bettyann Savory','Mariah Barberio','Aldo Byler','Barton Stecklein','Bettyann Savory','Barton Stecklein','Gordon Perrine','Pa Dargan','Aldo Byler','Brittani Brin','Bettyann Savory','Phyliss Houk','Bettyann Savory','Junie Ritenour','Aldo Byler','Calvin North','Brittani Brin','Junie Ritenour','Blanch Victoria','Brittani Brin','Bettyann Savory','Blanch Victoria','Mariah Barberio','Bettyann Savory','Blanch Victoria','Brittani Brin','Junie Ritenour','Pa Dargan','Gordon Perrine','Phyliss Houk','Pa Dargan','Mariah Barberio','Phyliss Houk','Phyliss Houk','Calvin North','Williams Camire','Brittani Brin','Gordon Perrine','Bettyann Savory','Bettyann Savory','Pa Dargan','Phyliss Houk','Barton Stecklein','Blanch Victoria','Coleman Dunmire','Phyliss Houk','Blanch Victoria','Pa Dargan','Harland Coolidge','Calvin North','Bettyann Savory','Phyliss Houk','Bettyann Savory','Harland Coolidge','Gordon Perrine','Junie Ritenour','Harland Coolidge','Blanch Victoria','Mariah Barberio','Coleman Dunmire','Aldo Byler','Bettyann Savory','Gordon Perrine','Bettyann Savory','Barton Stecklein','Harland Coolidge','Aldo Byler','Aldo Byler','Pa Dargan','Junie Ritenour','Brittani Brin','Junie Ritenour','Gordon Perrine','Mariah Barberio','Mariah Barberio','Mariah Barberio','Bettyann Savory','Brittani Brin','Aldo Byler','Phyliss Houk','Blanch Victoria','Pa Dargan','Phyliss Houk','Brittani Brin','Barton Stecklein','Coleman Dunmire','Bettyann Savory','Bettyann Savory','Gordon Perrine','Blanch Victoria','Junie Ritenour','Phyliss Houk','Coleman Dunmire','Williams Camire','Harland Coolidge','Williams Camire','Aldo Byler','Harland Coolidge','Gordon Perrine','Brittani Brin','Coleman Dunmire','Calvin North','Phyliss Houk','Brittani Brin','Aldo Byler','Bettyann Savory','Brittani Brin','Gordon Perrine','Calvin North','Harland Coolidge','Coleman Dunmire','Harland Coolidge','Aldo Byler','Junie Ritenour','Blanch Victoria','Harland Coolidge','Blanch Victoria','Junie Ritenour','Harland Coolidge','Junie Ritenour','Gordon Perrine','Brittani Brin','Coleman Dunmire','Williams Camire','Junie Ritenour','Brittani Brin','Calvin North','Barton Stecklein','Barton Stecklein','Mariah Barberio','Coleman Dunmire','Bettyann Savory','Mariah Barberio','Pa Dargan','Barton Stecklein','Coleman Dunmire','Brittani Brin','Barton Stecklein','Pa Dargan','Barton Stecklein','Junie Ritenour','Bettyann Savory','Williams Camire','Pa Dargan','Calvin North','Williams Camire','Coleman Dunmire','Aldo Byler','Barton Stecklein','Coleman Dunmire','Blanch Victoria','Mariah Barberio','Mariah Barberio','Harland Coolidge','Barton Stecklein','Phyliss Houk','Pa Dargan','Bettyann Savory','Barton Stecklein','Harland Coolidge','Junie Ritenour','Pa Dargan','Mariah Barberio','Blanch Victoria','Williams Camire','Phyliss Houk','Phyliss Houk','Coleman Dunmire','Mariah Barberio','Gordon Perrine','Coleman Dunmire','Brittani Brin','Pa Dargan','Coleman Dunmire','Brittani Brin','Blanch Victoria','Coleman Dunmire','Gordon Perrine','Coleman Dunmire','Aldo Byler','Aldo Byler','Mariah Barberio','Williams Camire','Phyliss Houk','Aldo Byler','Williams Camire','Aldo Byler','Williams Camire','Coleman Dunmire','Phyliss Houk'],
    "Weight":[128,180,193,177,237,166,224,208,177,241,114,161,162,151,220,142,193,193,124,130,132,141,190,239,213,131,172,127,184,157,215,122,181,240,218,205,239,217,234,158,180,131,194,171,177,110,117,114,217,123,248,189,198,127,182,121,224,111,151,170,188,150,137,231,222,186,139,175,178,246,150,154,129,216,144,198,228,183,173,129,157,199,186,232,172,157,246,239,214,161,132,208,187,224,164,177,175,224,219,235,112,241,243,179,208,196,131,207,182,233,191,162,173,197,190,182,231,196,196,143,250,174,138,135,164,204,235,192,114,179,215,127,185,213,250,213,153,217,176,190,119,167,118,208,113,206,200,236,159,218,168,159,156,183,121,203,215,209,179,219,174,220,129,188,217,250,166,157,112,236,182,144,189,243,238,147,165,115,160,134,245,174,238,157,150,184,174,134,134,248,199,165,117,119,162,112,170,224,247,217],
    "Membership(Days)":[52,70,148,124,186,157,127,155,37,185,158,129,93,69,124,13,76,153,164,161,48,121,167,69,39,163,7,34,176,169,108,162,195,86,155,77,197,200,80,142,179,67,58,145,188,147,125,15,13,173,125,4,61,29,132,110,62,137,197,135,162,174,32,151,149,65,18,42,63,62,104,200,189,40,38,199,1,12,8,2,195,30,7,72,130,144,2,34,200,143,43,196,22,115,171,54,143,59,14,52,109,115,187,185,26,19,178,18,120,169,45,52,130,69,168,178,96,22,78,152,39,51,118,130,60,156,108,69,103,158,165,142,86,91,117,77,57,169,86,188,97,111,22,83,81,177,163,35,12,164,21,181,171,138,22,107,58,51,38,128,19,193,157,13,104,89,13,10,26,190,179,101,7,159,100,49,120,109,56,199,51,108,47,171,69,162,74,119,148,88,32,159,65,146,140,171,88,18,59,13]
})
training_df.head(10)
28/3:
# Collecting a summary of all numeric data
training_df.describe()
28/4:
# Finding the names of the trainers
unique = training_df["Name"].unique()
unique
28/5:
# Finding how many students each trainer has
count = training_df["Trainer"].value_counts()
count
28/6:
# Finding the average weight of all students
average = training_df["Weight"].mean()
average
28/7:
# Finding the combined weight of all students
total = training_df["Weight"].sum()
total
28/8:
# Converting the membership days into weeks and then adding a column to the DataFrame
weeks = training_df["Membership (Days)"]/7
training_df["Membership (Weeks)"] = weeks

training_df.head()
28/9:
# Converting the membership days into weeks and then adding a column to the DataFrame
weeks = training_df["Membership (Days)"]/7
training_df["Membership (Weeks)"] = weeks

training_df.head()
28/10:
# Converting the membership days into weeks and then adding a column to the DataFrame
weeks = training_df["Membership(Days)"]/7
training_df["Membership(Weeks)"] = weeks

training_df.head()
29/1:
# Import Dependencies
import pandas as pd
29/2:
# A gigantic DataFrame of individuals' names, their trainers, their weight, and their days as gym members
training_df = pd.DataFrame({
    "Name":["Gino Walker","Hiedi Wasser","Kerrie Wetzel","Elizabeth Sackett","Jack Mitten","Madalene Wayman","Jamee Horvath","Arlena Reddin","Tula Levan","Teisha Dreier","Leslie Carrier","Arlette Hartson","Romana Merkle","Heath Viviani","Andres Zimmer","Allyson Osman","Yadira Caggiano","Jeanmarie Friedrichs","Leann Ussery","Bee Mom","Pandora Charland","Karena Wooten","Elizabet Albanese","Augusta Borjas","Erma Yadon","Belia Lenser","Karmen Sancho","Edison Mannion","Sonja Hornsby","Morgan Frei","Florencio Murphy","Christoper Hertel","Thalia Stepney","Tarah Argento","Nicol Canfield","Pok Moretti","Barbera Stallings","Muoi Kelso","Cicely Ritz","Sid Demelo","Eura Langan","Vanita An","Frieda Fuhr","Ernest Fitzhenry","Ashlyn Tash","Melodi Mclendon","Rochell Leblanc","Jacqui Reasons","Freeda Mccroy","Vanna Runk","Florinda Milot","Cierra Lecompte","Nancey Kysar","Latasha Dalton","Charlyn Rinaldi","Erline Averett","Mariko Hillary","Rosalyn Trigg","Sherwood Brauer","Hortencia Olesen","Delana Kohut","Geoffrey Mcdade","Iona Delancey","Donnie Read","Cesar Bhatia","Evia Slate","Kaye Hugo","Denise Vento","Lang Kittle","Sherry Whittenberg","Jodi Bracero","Tamera Linneman","Katheryn Koelling","Tonia Shorty","Misha Baxley","Lisbeth Goering","Merle Ladwig","Tammie Omar","Jesusa Avilla","Alda Zabala","Junita Dogan","Jessia Anglin","Peggie Scranton","Dania Clodfelter","Janis Mccarthy","Edmund Galusha","Tonisha Posey","Arvilla Medley","Briana Barbour","Delfina Kiger","Nia Lenig","Ricarda Bulow","Odell Carson","Nydia Clonts","Andree Resendez","Daniela Puma","Sherill Paavola","Gilbert Bloomquist","Shanon Mach","Justin Bangert","Arden Hokanson","Evelyne Bridge","Hee Simek","Ward Deangelis","Jodie Childs","Janis Boehme","Beaulah Glowacki","Denver Stoneham","Tarra Vinton","Deborah Hummell","Ulysses Neil","Kathryn Marques","Rosanna Dake","Gavin Wheat","Tameka Stoke","Janella Clear","Kaye Ciriaco","Suk Bloxham","Gracia Whaley","Philomena Hemingway","Claudette Vaillancourt","Olevia Piche","Trey Chiles","Idalia Scardina","Jenine Tremble","Herbert Krider","Alycia Schrock","Miss Weibel","Pearlene Neidert","Kina Callender","Charlotte Skelley","Theodora Harrigan","Sydney Shreffler","Annamae Trinidad","Tobi Mumme","Rosia Elliot","Debbra Putt","Rena Delosantos","Genna Grennan","Nieves Huf","Berry Lugo","Ayana Verdugo","Joaquin Mazzei","Doris Harmon","Patience Poss","Magaret Zabel","Marylynn Hinojos","Earlene Marcantel","Yuki Evensen","Rema Gay","Delana Haak","Patricia Fetters","Vinnie Elrod","Octavia Bellew","Burma Revard","Lakenya Kato","Vinita Buchner","Sierra Margulies","Shae Funderburg","Jenae Groleau","Louetta Howie","Astrid Duffer","Caron Altizer","Kymberly Amavisca","Mohammad Diedrich","Thora Wrinkle","Bethel Wiemann","Patria Millet","Eldridge Burbach","Alyson Eddie","Zula Hanna","Devin Goodwin","Felipa Kirkwood","Kurtis Kempf","Kasey Lenart","Deena Blankenship","Kandra Wargo","Sherrie Cieslak","Ron Atha","Reggie Barreiro","Daria Saulter","Tandra Eastman","Donnell Lucious","Talisha Rosner","Emiko Bergh","Terresa Launius","Margy Hoobler","Marylou Stelling","Lavonne Justice","Kala Langstaff","China Truett","Louanne Dussault","Thomasena Samaniego","Charlesetta Tarbell","Fatimah Lade","Malisa Cantero","Florencia Litten","Francina Fraise","Patsy London","Deloris Mclaughlin"],
    "Trainer":['Bettyann Savory','Mariah Barberio','Gordon Perrine','Pa Dargan','Blanch Victoria','Aldo Byler','Aldo Byler','Williams Camire','Junie Ritenour','Gordon Perrine','Bettyann Savory','Mariah Barberio','Aldo Byler','Barton Stecklein','Bettyann Savory','Barton Stecklein','Gordon Perrine','Pa Dargan','Aldo Byler','Brittani Brin','Bettyann Savory','Phyliss Houk','Bettyann Savory','Junie Ritenour','Aldo Byler','Calvin North','Brittani Brin','Junie Ritenour','Blanch Victoria','Brittani Brin','Bettyann Savory','Blanch Victoria','Mariah Barberio','Bettyann Savory','Blanch Victoria','Brittani Brin','Junie Ritenour','Pa Dargan','Gordon Perrine','Phyliss Houk','Pa Dargan','Mariah Barberio','Phyliss Houk','Phyliss Houk','Calvin North','Williams Camire','Brittani Brin','Gordon Perrine','Bettyann Savory','Bettyann Savory','Pa Dargan','Phyliss Houk','Barton Stecklein','Blanch Victoria','Coleman Dunmire','Phyliss Houk','Blanch Victoria','Pa Dargan','Harland Coolidge','Calvin North','Bettyann Savory','Phyliss Houk','Bettyann Savory','Harland Coolidge','Gordon Perrine','Junie Ritenour','Harland Coolidge','Blanch Victoria','Mariah Barberio','Coleman Dunmire','Aldo Byler','Bettyann Savory','Gordon Perrine','Bettyann Savory','Barton Stecklein','Harland Coolidge','Aldo Byler','Aldo Byler','Pa Dargan','Junie Ritenour','Brittani Brin','Junie Ritenour','Gordon Perrine','Mariah Barberio','Mariah Barberio','Mariah Barberio','Bettyann Savory','Brittani Brin','Aldo Byler','Phyliss Houk','Blanch Victoria','Pa Dargan','Phyliss Houk','Brittani Brin','Barton Stecklein','Coleman Dunmire','Bettyann Savory','Bettyann Savory','Gordon Perrine','Blanch Victoria','Junie Ritenour','Phyliss Houk','Coleman Dunmire','Williams Camire','Harland Coolidge','Williams Camire','Aldo Byler','Harland Coolidge','Gordon Perrine','Brittani Brin','Coleman Dunmire','Calvin North','Phyliss Houk','Brittani Brin','Aldo Byler','Bettyann Savory','Brittani Brin','Gordon Perrine','Calvin North','Harland Coolidge','Coleman Dunmire','Harland Coolidge','Aldo Byler','Junie Ritenour','Blanch Victoria','Harland Coolidge','Blanch Victoria','Junie Ritenour','Harland Coolidge','Junie Ritenour','Gordon Perrine','Brittani Brin','Coleman Dunmire','Williams Camire','Junie Ritenour','Brittani Brin','Calvin North','Barton Stecklein','Barton Stecklein','Mariah Barberio','Coleman Dunmire','Bettyann Savory','Mariah Barberio','Pa Dargan','Barton Stecklein','Coleman Dunmire','Brittani Brin','Barton Stecklein','Pa Dargan','Barton Stecklein','Junie Ritenour','Bettyann Savory','Williams Camire','Pa Dargan','Calvin North','Williams Camire','Coleman Dunmire','Aldo Byler','Barton Stecklein','Coleman Dunmire','Blanch Victoria','Mariah Barberio','Mariah Barberio','Harland Coolidge','Barton Stecklein','Phyliss Houk','Pa Dargan','Bettyann Savory','Barton Stecklein','Harland Coolidge','Junie Ritenour','Pa Dargan','Mariah Barberio','Blanch Victoria','Williams Camire','Phyliss Houk','Phyliss Houk','Coleman Dunmire','Mariah Barberio','Gordon Perrine','Coleman Dunmire','Brittani Brin','Pa Dargan','Coleman Dunmire','Brittani Brin','Blanch Victoria','Coleman Dunmire','Gordon Perrine','Coleman Dunmire','Aldo Byler','Aldo Byler','Mariah Barberio','Williams Camire','Phyliss Houk','Aldo Byler','Williams Camire','Aldo Byler','Williams Camire','Coleman Dunmire','Phyliss Houk'],
    "Weight":[128,180,193,177,237,166,224,208,177,241,114,161,162,151,220,142,193,193,124,130,132,141,190,239,213,131,172,127,184,157,215,122,181,240,218,205,239,217,234,158,180,131,194,171,177,110,117,114,217,123,248,189,198,127,182,121,224,111,151,170,188,150,137,231,222,186,139,175,178,246,150,154,129,216,144,198,228,183,173,129,157,199,186,232,172,157,246,239,214,161,132,208,187,224,164,177,175,224,219,235,112,241,243,179,208,196,131,207,182,233,191,162,173,197,190,182,231,196,196,143,250,174,138,135,164,204,235,192,114,179,215,127,185,213,250,213,153,217,176,190,119,167,118,208,113,206,200,236,159,218,168,159,156,183,121,203,215,209,179,219,174,220,129,188,217,250,166,157,112,236,182,144,189,243,238,147,165,115,160,134,245,174,238,157,150,184,174,134,134,248,199,165,117,119,162,112,170,224,247,217],
    "Membership(Days)":[52,70,148,124,186,157,127,155,37,185,158,129,93,69,124,13,76,153,164,161,48,121,167,69,39,163,7,34,176,169,108,162,195,86,155,77,197,200,80,142,179,67,58,145,188,147,125,15,13,173,125,4,61,29,132,110,62,137,197,135,162,174,32,151,149,65,18,42,63,62,104,200,189,40,38,199,1,12,8,2,195,30,7,72,130,144,2,34,200,143,43,196,22,115,171,54,143,59,14,52,109,115,187,185,26,19,178,18,120,169,45,52,130,69,168,178,96,22,78,152,39,51,118,130,60,156,108,69,103,158,165,142,86,91,117,77,57,169,86,188,97,111,22,83,81,177,163,35,12,164,21,181,171,138,22,107,58,51,38,128,19,193,157,13,104,89,13,10,26,190,179,101,7,159,100,49,120,109,56,199,51,108,47,171,69,162,74,119,148,88,32,159,65,146,140,171,88,18,59,13]
})
training_df.head(10)
29/3:
# Collecting a summary of all numeric data
training_df.describe()
29/4:
# Finding the names of the trainers
unique = training_df["Name"].unique()
unique
29/5:
# Finding how many students each trainer has
count = training_df["Trainer"].value_counts()
count
29/6:
# Finding the average weight of all students
average = training_df["Weight"].mean()
average
29/7:
# Finding the combined weight of all students
total = training_df["Weight"].sum()
total
29/8:
# Converting the membership days into weeks and then adding a column to the DataFrame
weeks = training_df["Membership(Days)"]/7
training_df["Membership(Weeks)"] = weeks.round(2)

training_df.head()
32/1:
# import dependencies
import pandas as pd
32/2:
# Create a data frame with given columns and value
hey_arnold_df = pd.DataFrame(
    {"Character_in_show": ["Arnold", "Gerald", "Helga", "Phoebe", "Harold", "Eugene"],
     "color_of_hair": ["blonde", "black", "blonde", "black", "unknown", "red"],
     "Height": ["average", "tallish", "tallish", "short", "tall", "short"],
     "Football_Shaped_Head": [True, False, False, False, False, False]
     })

hey_arnold_df
32/3:
# Rename columns to clean up the look
hey_arnold_renamed_df = hey_arnold_renamed_df.rename(columns={"Character_in_show": "Character",
                                                "color_of_hair": "Hair Color",
                                                "Height": "Height",
                                                "Football_Shaped_Head": "Football Head"})
hey_arnold_renamed_df
34/1:
# import dependencies
import pandas as pd
34/2:
# Create a data frame with given columns and value
hey_arnold_df = pd.DataFrame(
    {"Character_in_show": ["Arnold", "Gerald", "Helga", "Phoebe", "Harold", "Eugene"],
     "color_of_hair": ["blonde", "black", "blonde", "black", "unknown", "red"],
     "Height": ["average", "tallish", "tallish", "short", "tall", "short"],
     "Football_Shaped_Head": [True, False, False, False, False, False]
     })

hey_arnold_df
34/3:
# Rename columns to clean up the look
hey_arnold_renamed_df = hey_arnold_renamed_df.rename(columns={"Character_in_show": "Character",
                                                "color_of_hair": "Hair Color",
                                                "Height": "Height",
                                                "Football_Shaped_Head": "Football Head"})
hey_arnold_renamed_df
34/4:
# Rename columns to clean up the look
hey_arnold_renamed_df = hey_arnold_renamed_df.rename(columns={"Character_in_show":"Character",
                                                "color_of_hair": "Hair Color",
                                                "Height": "Height",
                                                "Football_Shaped_Head":"Football Head"})
hey_arnold_renamed_df
34/5:
# Organize columns into a more logical order
hey_arnold_alphabetical_df = hey_arnold_renamed_df[[
    "Character", "Football Head", "Hair Color", "Height"]]

hey_arnold_alphabetical_df
35/1:
# import dependencies
import pandas as pd
35/2:
# Create a data frame with given columns and value
hey_arnold_df = pd.DataFrame(
    {"Character_in_show": ["Arnold", "Gerald", "Helga", "Phoebe", "Harold", "Eugene"],
     "color_of_hair": ["blonde", "black", "blonde", "black", "unknown", "red"],
     "Height": ["average", "tallish", "tallish", "short", "tall", "short"],
     "Football_Shaped_Head": [True, False, False, False, False, False]
     })

hey_arnold_df
35/3:
# Rename columns to clean up the look
hey_arnold_renamed_df = hey_arnold_renamed_df.rename(columns={"Character_in_show":"Character",
                                                "color_of_hair": "Hair Color",
                                                "Height": "Height",
                                                "Football_Shaped_Head":"Football Head"})
hey_arnold_renamed_df
35/4:
# Organize columns into a more logical order
hey_arnold_alphabetical_df = hey_arnold_renamed_df[["Character", "Football Head", "Hair Color", "Height"]]

hey_arnold_alphabetical_df
36/1:
# Dependencies
import pandas as pd
36/2:
# Create a DataFrame with given columns and value
hey_arnold_df = pd.DataFrame(
    {"Character_in_show": ["Arnold", "Gerald", "Helga", "Phoebe", "Harold", "Eugene"],
     "color_of_hair": ["blonde", "black", "blonde", "black", "unknown", "red"],
     "Height": ["average", "tallish", "tallish", "short", "tall", "short"],
     "Football_Shaped_Head": [True, False, False, False, False, False]
     })

hey_arnold_df
36/3:
# Rename columns for readability
hey_arnold_renamed_df = hey_arnold_df.rename(columns={"Character_in_show": "Character",
                                                "color_of_hair": "Hair Color",
                                                "Height": "Height",
                                                "Football_Shaped_Head": "Football Head"
                                                })
hey_arnold_renamed_df
36/4:
# Organize the columns so they are in a more logical order
hey_arnold_alphabetical_df = hey_arnold_renamed_df[[
    "Character", "Football Head", "Hair Color", "Height"]]

hey_arnold_alphabetical_df
38/1:
# Dependencies
import pandas as pd
38/2:
# Create a DataFrame with given columns and value
hey_arnold_df = pd.DataFrame(
    {"Character_in_show": ["Arnold", "Gerald", "Helga", "Phoebe", "Harold", "Eugene"],
     "color_of_hair": ["blonde", "black", "blonde", "black", "unknown", "red"],
     "Height": ["average", "tallish", "tallish", "short", "tall", "short"],
     "Football_Shaped_Head": [True, False, False, False, False, False]
     })

hey_arnold_df
38/3:
# Rename columns for readability
hey_arnold_renamed_df = hey_arnold_df.rename(columns={"Character_in_show": "Character",
                                                "color_of_hair": "Hair Color",
                                                "Height": "Height",
                                                "Football_Shaped_Head": "Football Head"
                                                })
hey_arnold_renamed_df
38/4:
# Organize the columns so they are in a more logical order
hey_arnold_alphabetical_df = hey_arnold_renamed_df[[
    "Character", "Football Head", "Hair Color", "Height"]]

hey_arnold_alphabetical_df
38/5:
# Rename columns for readability
hey_arnold_renamed_df = hey_arnold_df.rename(columns={"Character_in_show": "Character",
                                                "color_of_hair": "Hair Color",
                                                "Height": "Height",
                                                "Football_Shaped_Head": "Football Head?"
                                                })
hey_arnold_renamed_df
38/6:
# Organize the columns so they are in a more logical order
hey_arnold_alphabetical_df = hey_arnold_renamed_df[[
    "Character", "Football Head?", "Hair Color", "Height"]]

hey_arnold_alphabetical_df
42/1:
# Import Dependencies
import pandas as pd
42/2:
# Make a reference to the books.csv file path
csv_path = "Resources/books.csv"
# Import the books.csv file as a DataFrame
books_df = pd.read_csv(csv_path, encoding="utf-8")
books_df.head()
42/3:
# Remove unecessary columns from the DataFrame and save the new DataFrame
# Only keep: "isbn", "original_publication_year", "original_title", "authors",
# "ratings_1", "ratings_2", "ratings_3", "ratings_4", "ratings_5"
reduced_df = books_df[["isbn", "original_publication_year", "original_title", "authors",
                       "ratings_1", "ratings_2", "ratings_3", "ratings_4", "ratings_5"]]
reduced_df
42/4:
# Rename the headers to be more explanatory
renamed_df = reduced_df.rename(columns={"isbn": "ISBN",
                                        "original_title": "Original Title",
                                        "original_publication_year": "Publication Year",
                                        "authors": "Authors",
                                        "ratings_1": "One Star Reviews",
                                        "ratings_2": "Two Star Reviews",
                                        "ratings_3": "Three Star Reviews",
                                        "ratings_4": "Four Star Reviews",
                                        "ratings_5": "Five Star Reviews",})
renamed_df.head()
42/5:
# Push the remade DataFrame to a new CSV file
renamed_df.to_csv("Output/books_clean.csv",
                 encoding="utf-8", index=False, header=True)
46/1:
# Import Dependencies
import pandas as pd
46/2:
# File to Load
goodreads_path = "Resources/books_clean.csv"

# Read the modified GoodReads csv and store into Pandas DataFrame
goodreads_df = pd.read_csv(goodreads_path, encoding="utf-8")
goodreads_df.head()
46/3:
# Calculate the number of unique authors in the DataFrame
author_count = len(goodreads_df["Authors"].unique())

# Calculate the earliest/latest year a book was published
earliest_year = goodreads_df["Publication Year"].min()
latest_year = goodreads_df["Publication Year"].max()


# Calculate the total reviews for the entire dataset
# Hint: use the pandas' sum() method to get the sum for each row
goodreads_df['Total Reviews'] = goodreads_df.iloc[:, 4:].sum(axis=1)
total_reviews = sum(goodreads_df['Total Rreviewes'])
46/4:
# Calculate the number of unique authors in the DataFrame
author_count = len(goodreads_df["Authors"].unique())

# Calculate the earliest/latest year a book was published
earliest_year = goodreads_df["Publication Year"].min()
latest_year = goodreads_df["Publication Year"].max()


# Calculate the total reviews for the entire dataset
# Hint: use the pandas' sum() method to get the sum for each row
goodreads_df['Total Reviews'] = goodreads_df.iloc[:, 4:].sum(axis=1)
total_reviews = sum(goodreads_df['Total Rreviewes'])
46/5:
# Place all of the data found into a summary DataFrame
summary_df = pd.DataFrame({"Total Unique Authors": [author_count],
                          "Earliest Year": earlriest_year,
                          "Latest Year": latest_year,
                          "Total Reviews": total_reviewes})
summary_df
48/1:
# Import Dependencies
import pandas as pd
48/2:
# File to Load
goodreads_path = "Resources/books_clean.csv"

# Read the modified GoodReads csv and store into Pandas DataFrame
goodreads_df = pd.read_csv(goodreads_path, encoding="utf-8")
goodreads_df.head()
48/3:
# Calculate the number of unique authors in the DataFrame
author_count = len(goodreads_df["Authors"].unique())

# Calculate the earliest/latest year a book was published
earliest_year = goodreads_df["Publication Year"].min()
latest_year = goodreads_df["Publication Year"].max()


# Calculate the total reviews for the entire dataset
# Hint: use the pandas' sum() method to get the sum for each row
goodreads_df['Total Reviews'] = goodreads_df.iloc[:, 4:].sum(axis=1)
total_reviews = sum(goodreads_df['Total Rreviewes'])
49/1:
# Import Dependencies
import pandas as pd
49/2:
# File to Load
goodreads_path = "Resources/books_clean.csv"

# Read the modified GoodReads csv and store into Pandas DataFrame
goodreads_df = pd.read_csv(goodreads_path, encoding="utf-8")
goodreads_df.head()
49/3:
# Calculate the number of unique authors in the DataFrame
author_count = len(goodreads_df["Authors"].unique())

# Calculate the earliest/latest year a book was published
earliest_year = goodreads_df["Publication Year"].min()
latest_year = goodreads_df["Publication Year"].max()

# Calculate the total reviews for the entire dataset
# Hint: use the pandas' sum() method to get the sum for each row
goodreads_df['Total Reviews'] = goodreads_df.iloc[:, 4:].sum(axis=1)
total_reviews = sum(goodreads_df['Total Reviews'])
49/4:
# Place all of the data found into a summary DataFrame
summary_df = pd.DataFrame({"Total Unique Authors": [author_count],
                              "Earliest Year": earliest_year,
                              "Latest Year": latest_year,
                              "Total Reviews": total_reviews})
summary_df
48/4:
# Calculate the number of unique authors in the DataFrame
author_count = len(goodreads_df["Authors"].unique())

# Calculate the earliest/latest year a book was published
earliest_year = goodreads_df["Publication Year"].min()
latest_year = goodreads_df["Publication Year"].max()


# Calculate the total reviews for the entire dataset
# Hint: use the pandas' sum() method to get the sum for each row
goodreads_df['Total Reviews'] = goodreads_df.iloc[:, 4:].sum(axis=1)
total_reviews = sum(goodreads_df['Total Reviews'])
48/5:
# Place all of the data found into a summary DataFrame
summary_df = pd.DataFrame({"Total Unique Authors": [author_count],
                          "Earliest Year": earlriest_year,
                          "Latest Year": latest_year,
                          "Total Reviews": total_reviewes})
summary_df
48/6:
# Place all of the data found into a summary DataFrame
summary_df = pd.DataFrame({"Total Unique Authors": [author_count],
                          "Earliest Year": earliest_year,
                          "Latest Year": latest_year,
                          "Total Reviews": total_reviews})
summary_df
51/1:
# Read and display with pandas
original_df = pd.read_csv(file)
original_df.head()
53/1:
# Dependencies
import pandas as pd
53/2:
# Load in File from resources
# 'movie_scores.csv'
file = "Resources/movie_scores.csv"
53/3:
# Read and display with pandas
original_df = pd.read_csv(file)
original_df.head()
53/4: # List all the columns the table provides
53/5: # only care about Imdb, so create a new table that takes the Film and all the columns relating to IMDB
53/6: # List only movies whose ratings are over 7 (out of 10) in IMDB
53/7: # Find lesser-known movies to watch, with fewer than 20K votes
53/8: # Finally, export this file to an Excel spreadsheet -- without the DataFrame index.
53/9:
# List all the columns the table provides
goodMovies_columns = df.iloc[0:1, 0:23]
53/10:
# List all the columns the table provides
movie_file_df.columns
55/1:
# Dependencies
import pandas as pd
55/2:
# Load in File from resources
# 'movie_scores.csv'
movie_file = "Resources/movie_scores.csv"
55/3:
# Read and display with pandas
movie_file_df = pd.read_csv(movie_file)
movie_file_df.head()
55/4:
# List all the columns the table provides
movie_file_df.columns
55/5: # only care about Imdb, so create a new table that takes the Film and all the columns relating to IMDB
55/6: # List only movies whose ratings are over 7 (out of 10) in IMDB
55/7: # Find lesser-known movies to watch, with fewer than 20K votes
55/8: # Finally, export this file to an Excel spreadsheet -- without the DataFrame index.
55/9:
# List only movies whose ratings are over 7 (out of 10) in IMDB
rating_df = movie_file_df.loc[movie_file_df["IMDB"] > 7, ["FILM", "IMDB", "IMDB_user_vote_count"]]
rating_df.head()
55/10:
# only care about Imdb, so create a new table that takes the Film and all the columns relating to IMDB
imbd_df = movie_file_df[["FILM", 
                         "IMDB",
                         "IMDB_norm",
                        "IMDB_norm_round",
                         "IMDB_user_vote_count"]]
imbd_df.head()
56/1:
# Dependencies
import pandas as pd
56/2:
# Load in File from resources
# 'movie_scores.csv'
movie_file = "Resources/movie_scores.csv"
56/3:
# Read and display with pandas
movie_file_df = pd.read_csv(movie_file)
movie_file_df.head()
56/4:
# List all the columns the table provides
movie_file_df.columns
56/5:
# only care about Imdb, so create a new table that takes the Film and all the columns relating to IMDB
imbd_df = movie_file_df[["FILM", 
                         "IMDB",
                         "IMDB_norm",
                        "IMDB_norm_round",
                         "IMDB_user_vote_count"]]
imbd_df.head()
56/6:
# List only movies whose ratings are over 7 (out of 10) in IMDB
rating_df = movie_file_df.loc[movie_file_df["IMDB"] > 7, ["FILM", "IMDB", "IMDB_user_vote_count"]]
rating_df.head()
56/7:
# Find lesser-known movies to watch, with fewer than 20K votes
unknown_movies_df = rating_df.loc[rating_df]["IMDB_user_vote_count"] < 20000, ["FILM", "IMDB", "IMDB_user_vote_count"]]
unknown_movies_df.head()
56/8:
# Finally, export this file to an Excel spreadsheet -- without the DataFrame index.
unknown_movies_df.to_excel("output/movieWatchlist.xlsx", index=False)
56/9:
# Find lesser-known movies to watch, with fewer than 20K votes
unknown_movies_df = rating_df.loc[rating_df["IMDB_user_vote_count"] < 20000, ["FILM", "IMDB", "IMDB_user_vote_count"]]
unknown_movies_df.head()
56/10:
# Finally, export this file to an Excel spreadsheet -- without the DataFrame index.
unknown_movies_df.to_excel("output/movieWatchlist.xlsx", index=False)
56/11:
# Finally, export this file to an Excel spreadsheet -- without the DataFrame index.
unknown_movies_df.to_excel("output/movieWatchlist.xlsx", index=False)
57/1:
# Dependencies
import pandas as pd
57/2:
# Load in File from resources
# 'movie_scores.csv'
movie_file = "Resources/movie_scores.csv"
57/3:
# Read and display with pandas
movie_file_df = pd.read_csv(movie_file, encoding = "utf8")
movie_file_df.head()
57/4:
# List all the columns the table provides
movie_file_df.columns
57/5:
# only care about Imdb, so create a new table that takes the Film and all the columns relating to IMDB
imbd_df = movie_file_df[["FILM", 
                         "IMDB",
                         "IMDB_norm",
                        "IMDB_norm_round",
                         "IMDB_user_vote_count"]]
imbd_df.head()
57/6:
# List only movies whose ratings are over 7 (out of 10) in IMDB
rating_df = movie_file_df.loc[movie_file_df["IMDB"] > 7, ["FILM", "IMDB", "IMDB_user_vote_count"]]
rating_df.head()
57/7:
# Find lesser-known movies to watch, with fewer than 20K votes
unknown_movies_df = rating_df.loc[rating_df["IMDB_user_vote_count"] < 20000, ["FILM", "IMDB", "IMDB_user_vote_count"]]
unknown_movies_df.head()
57/8:
# Finally, export this file to an Excel spreadsheet -- without the DataFrame index.
unknown_movies_df.to_excel("output/movieWatchlist.xlsx", index=False)
58/1:
# Dependencies
import pandas as pd
58/2:
# Load in File from resources
# 'movie_scores.csv'
movie_file = "Resources/movie_scores.csv"
58/3:
# Read and display with pandas
movie_file_df = pd.read_csv(movie_file, encoding = "utf-8")
movie_file_df.head()
58/4:
# List all the columns the table provides
movie_file_df.columns
58/5:
# only care about Imdb, so create a new table that takes the Film and all the columns relating to IMDB
imbd_df = movie_file_df[["FILM", 
                         "IMDB",
                         "IMDB_norm",
                        "IMDB_norm_round",
                         "IMDB_user_vote_count"]]
imbd_df.head()
58/6:
# List only movies whose ratings are over 7 (out of 10) in IMDB
rating_df = movie_file_df.loc[movie_file_df["IMDB"] > 7, ["FILM", "IMDB", "IMDB_user_vote_count"]]
rating_df.head()
58/7:
# Find lesser-known movies to watch, with fewer than 20K votes
unknown_movies_df = rating_df.loc[rating_df["IMDB_user_vote_count"] < 20000, ["FILM", "IMDB", "IMDB_user_vote_count"]]
unknown_movies_df.head()
58/8:
# Finally, export this file to an Excel spreadsheet -- without the DataFrame index.
unknown_movies_df.to_excel("output/movieWatchlist.xlsx", index=False)
59/1:
# Reference the file where the CSV is located
portland_crime = "Resources/crime_incident_data2017.csv"

# Import the data into a Pandas DataFrame
portland_crime_df = pd.read_csv(portland_crime, encoding = "utf-8")
portland_crime.df()
61/1:
# Import Dependencies
import pandas as pd
61/2:
# Reference the file where the CSV is located
portland_crime = "Resources/crime_incident_data2017.csv"

# Import the data into a Pandas DataFrame
portland_crime_df = pd.read_csv(portland_crime, encoding = "utf-8")
portland_crime.df()
62/1:
# Import Dependencies
import pandas as pd
62/2:
# Reference the file where the CSV is located
portland_crime = "Resources/crime_incident_data2017.csv"

# Import the data into a Pandas DataFrame
portland_crime_df = pd.read_csv(portland_crime, encoding = "utf-8")
portland_crime.df()
62/3:
# Reference the file where the CSV is located
portland_crime = "Resources/crime_incident_data2017.csv"

# Import the data into a Pandas DataFrame
portland_crime_df = pd.read_csv(portland_crime, encoding="utf-8")
portland_crime.df()
62/4:
# Reference the file where the CSV is located
portland_crime = "Resources/crime_incident_data2017.csv"

# Import the data into a Pandas DataFrame
portland_crime_df = pd.read_csv(portland_crime, encoding="utf-8")
portland_crime_df.head()
62/5:
# look for missing values
df.count()
62/6:
# look for missing values
portland_crime_df.count()
62/7:
# drop null rows
portland_crime_df = portland_crime_df.dropna(how='any')
62/8:
# verify counts
portland_crime_df.count()
62/9:
# Check to see if there are any values with mispelled or similar values in "Offense Type"
portland_crime_df["Offense Type"].value_counts()
62/10:
# Check to see if you comnbined similar offenses correctly in "Offense Type".
portland_crimes_df["Offense Type"].value_counts()
62/11:
# Combine similar offenses
portland_crime_df["Offense Type"] = portland_crime_df["Offense Type"].replace(
    {'Theft From Motor Vehicle': 'Motor Vehicle Theft', 'Commercial Sex Acts': 'Prostitution', 'Impersonation': 'Identity Theft', 'Robbery': 'Burglary'})
62/12:
# Check to see if you comnbined similar offenses correctly in "Offense Type".
portland_crime_df["Offense Type"].value_counts()
62/13:
# Combine similar offenses
portland_crime_df["Offense Type"] = portland_crime_df["Offense Type"].replace(
    {'Theft From Motor Vehicle': 'Motor Vehicle Theft', 'Commercial Sex Acts': 'Prostitution', 'Impersonation': 'Identity Theft', 'Robbery': 'Burglary', 'Pocket-Picking':'Purse-Snatching'})
62/14:
# Check to see if you comnbined similar offenses correctly in "Offense Type".
portland_crime_df["Offense Type"].value_counts()
62/15:
# Create a new DataFrame that looks into a specific neighborhood
only_centennial = portland_crime_df.loc[portland_crime_df["Neighborhood"] == "Centennial", :]
print(only_centennial)
62/16:
# Create a new DataFrame that looks into a specific neighborhood
only_centennial = portland_crime_df.loc[portland_crime_df["Neighborhood"] == "Centennial", :]
only_centennial.head()
67/1:
# Read with Pandas
pokemon_df = pd.read.csv(pokemon, encoding="utf-8")
pokemon_df.head()
69/1:
# Dependencies
import pandas as pd
69/2:
# Save file path to variable
pokemon = "Resources/Pokemon.csv"
69/3:
# Read with Pandas
pokemon_df = pd.read.csv(pokemon, encoding="utf-8")
pokemon_df.head()
69/4:
# Read with Pandas
pokemon_df = pd.read_csv(pokemon,encoding="utf-8")
pokemon_df.head()
69/5:
# Extract the following columns: "Type 1", "HP", "Attack", "Sp. Atk", "Sp. Def", and "Speed"
pokemon_type_df = pokemon_df[["Type 1", "HP", "Attack", "Sp. Atk", "Sp. Def", "Speed"]]
pokemon_type_df.head()
69/6:
# Create a dataframe of the average stats for each type of pokemon.
pokemon_groupedtype_df = pokemon_type_df.groupby("Type 1")
pokemon_groupedtype_df.head()
69/7:
# Create a dataframe of the average stats for each type of pokemon.
pokemon_groupedtype_df = pokemon_type_df.groupby("Type 1")
pokemon_groupedtype_df.head(10)
69/8:
# Create a dataframe of the average stats for each type of pokemon.
pokemon_groupedtype_df = pokemon_type_df.groupby(["Type 1"])
pokemon_groupedtype_df.head(10)
69/9:
# Calculate the total power level of each type of pokemon by summing all of the stats together.
# Place the results into a new column.
# Hint: Research the sum method from pandas.
69/10:
# Create a dataframe of the average stats for each type of pokemon.
pokemon_groupedtype_df = pokemon_type_df.groupby(["Type 1"])
pokemon_groupedtype_df.head(10)
69/11:
# Create a dataframe of the average stats for each type of pokemon.
pokemon_groupedtype_df. = pokemon_type_df.groupby(["Type 1"])
pokemon_groupedtype_df.count().head(10)
69/12:
# Create a dataframe of the average stats for each type of pokemon.
pokemon_groupedtype_df = pokemon_type_df.groupby(["Type 1"])
pokemon_groupedtype_df.count().head(10)
69/13:
# Create a dataframe of the average stats for each type of pokemon.
pokemon_groupedtype_df = pokemon_type_df.groupby(["Type 1"])
pokemon_groupedtype_df.mean().head(10)
69/14:
# Create a dataframe of the average stats for each type of pokemon.
pokemon_groupedtype_df = pokemon_type_df.groupby(["Type 1"])
pokemon_groupedtype_df.mean().head(10)
69/15:
# Create a dataframe of the average stats for each type of pokemon.
pokemon_groupedtype_df = pokemon_type_df.groupby(["Type 1"])
pokemon_groupedtype_df.mean().head(10).round()
69/16:
# Create a dataframe of the average stats for each type of pokemon.
pokemon_groupedtype_df = pokemon_type_df.groupby(["Type 1"])
pokemon_groupedtype_df.mean().head(10).round(2)
69/17:
# Calculate the total power level of each type of pokemon by summing all of the stats together.
# Place the results into a new column.
# Hint: Research the sum method from pandas.
pokemon_comparison_df["Total"] = pokemon_comparison_df.sum(axis=1)
pokemon_comparison_df["Total"]
69/18:
# Calculate the total power level of each type of pokemon by summing all of the stats together.
# Place the results into a new column.
# Hint: Research the sum method from pandas.
pokemon_groupedtype_df["Total"] = pokemon_groupedtype_df.sum(axis=1)
pokemon_groupedtype_df["Total"]
69/19:
# Calculate the total power level of each type of pokemon by summing all of the stats together.
# Place the results into a new column.
# Hint: Research the sum method from pandas.
pokemon_summary_df = pokemon_groupedtype_df.sum(axis=1)
69/20:
# Calculate the total power level of each type of pokemon by summing all of the stats together.
# Place the results into a new column.
# Hint: Research the sum method from pandas.
pokemon_summary_df["Total"] = pokemon_groupedtype_df.sum(axis=1)
pokemon_summary_df["Total"]
69/21:
# Calculate the total power level of each type of pokemon by summing all of the stats together.
# Place the results into a new column.
# Hint: Research the sum method from pandas.
pokemon_summary_df["Total"] = pokemon_groupedtype_df.sum(axis=1)
pokemon_summary_df["Total"]
71/1:
# Collect a list of all the unique values in "Preferred Position"
soccer_2018_df["Preferred Position"].unique()
73/1:
# Import Dependencies
import pandas as pd
73/2:
# Create reference to CSV file
csv_path = "Resources/Soccer2018Data.csv"

# Import the CSV into a pandas DataFrame
soccer_2018_df = pd.read_csv(csv_path, low_memory=False)
soccer_2018_df
73/3:
# Collect a list of all the unique values in "Preferred Position"
soccer_2018_df["Preferred Position"].unique()
73/4: # Looking only at strikers (ST) to start
73/5:
# Sort the DataFrame by the values in the "ST" column to find the worst

# Reset the index so that the index is now based on the sorting locations
73/6: # Save all of the information collected on the worst striker
73/7:
# Looking only at strikers (ST) to start
soccer_2018ST_df = soccer_2018_df.sort_values("ST", ascending=false)
soccer_2018ST_df.head()
73/8:
# Looking only at strikers (ST) to start
soccer_2018ST_df = soccer_2018_df.sort_values("ST", ascending=False)
soccer_2018ST_df.head()
73/9:
# Looking only at strikers (ST) to start
ST_2018_df = soccer_2018_df.loc[soccer_2018_df["Preferred Position"] == "ST", :]
ST_2018_df.head()
73/10:
# Sort the DataFrame by the values in the "ST" column to find the worst
STR_2018_df = soccer_2018_df.sort_values("Preferred Position", ascending=False)
STR_2018_df.head()

# Reset the index so that the index is now based on the sorting locations
73/11:
# Sort the DataFrame by the values in the "ST" column to find the worst
STR_2018_df = soccer_2018_df.sort_values("Preferred Position", ascending=False)
STR_2018_df.head()

# Reset the index so that the index is now based on the sorting locations
new_index_df = STR_2018_df.reset_index(drop=True)
73/12:
# Sort the DataFrame by the values in the "ST" column to find the worst
STR_2018_df = soccer_2018_df.sort_values("Preferred Position", ascending=False)
STR_2018_df.head()

# Reset the index so that the index is now based on the sorting locations
new_index_df = STR_2018_df.reset_index(drop=True)
73/13:
# Sort the DataFrame by the values in the "ST" column to find the worst
STR_2018_df = soccer_2018_df.sort_values("ST")

# Reset the index so that the index is now based on the sorting locations
STR_2018_df = STR_2018_df.reset_index(drop=True)
STR_2018_df.head()
73/14:
# Sort the DataFrame by the values in the "ST" column to find the worst
STR_2018_df = soccer_2018_df.sort_values("ST", ascending=False)

# Reset the index so that the index is now based on the sorting locations
STR_2018_df = STR_2018_df.reset_index(drop=True)
STR_2018_df.head()
73/15:
# Save all of the information collected on the worst striker
worst_ST = ST_2018_df.loc[0, :]
worst_ST
73/16:
# Sort the DataFrame by the values in the "ST" column to find the worst
STR_2018_df = soccer_2018_df.sort_values("ST", ascending=True)

# Reset the index so that the index is now based on the sorting locations
STR_2018_df = STR_2018_df.reset_index(drop=False)
STR_2018_df.head()
73/17:
# Save all of the information collected on the worst striker
worst_ST = ST_2018_df.loc[0, :]
worst_ST
73/18:
# Sort the DataFrame by the values in the "ST" column to find the worst
STR_2018_df = soccer_2018_df.sort_values("ST")

# Reset the index so that the index is now based on the sorting locations
STR_2018_df = STR_2018_df.reset_index(drop=True)
STR_2018_df.head()
73/19:
# Sort the DataFrame by the values in the "ST" column to find the worst
STR_2018_df = soccer_2018_df.sort_values("ST")

# Reset the index so that the index is now based on the sorting locations
STR_2018_df = STR_2018_df.reset_index(drop=True)
STR_2018_df.head()
73/20:
# Save all of the information collected on the worst striker
worst_ST = ST_2018_df.loc[0, :]
worst_ST
74/1:
# Import Dependencies
import pandas as pd
74/2:
# Create reference to CSV file
csv_path = "Resources/Soccer2018Data.csv"

# Import the CSV into a pandas DataFrame
soccer_2018_df = pd.read_csv(csv_path, low_memory=False)
soccer_2018_df
74/3:
# Collect a list of all the unique values in "Preferred Position"
soccer_2018_df["Preferred Position"].unique()
74/4:
# Looking only at strikers (ST) to start
ST_2018_df = soccer_2018_df.loc[soccer_2018_df["Preferred Position"] == "ST", :]
ST_2018_df.head()
74/5:
# Sort the DataFrame by the values in the "ST" column to find the worst
STR_2018_df = soccer_2018_df.sort_values("ST")

# Reset the index so that the index is now based on the sorting locations
STR_2018_df = STR_2018_df.reset_index(drop=True)
STR_2018_df.head()
74/6:
# Save all of the information collected on the worst striker
worst_ST = ST_2018_df.loc[0, :]
worst_ST
74/7:
# Looking only at strikers (ST) to start
ST_2018_df = soccer_2018_df.loc[soccer_2018_df["Preferred Position"] == "ST", :]
ST_2018_df.head
74/8:
# Looking only at strikers (ST) to start
ST_2018_df = soccer_2018_df.loc[soccer_2018_df["Preferred Position"] == "ST", :]
ST_2018_df
77/1:
# Read and display the CSV with Pandas
pycityschools_file_df = pd.read_csv(pycityschools_file)
pycityschools_file_df.head()
80/1:
# Dependencies
import pandas as pd
80/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
80/3:
# Read and display the CSV with Pandas
pycityschools_file_df = pd.read_csv(pycityschools_file)
pycityschools_file_df.head()
80/4:
# Count total schools
total_schools = pycityschools_file_df["school_name"].value_counts()
80/5:
# Count total schools
total_schools = pycityschools_file_df["school_name"].value_counts()
total_schools
86/1:
# Import Dependencies
import pandas as pd
86/2:
bitcoin_csv = "Resources/bitcoin_cash_price.csv"
dash_csv = "Resources/dash_price.csv"
86/3:
bitcoin_df = pd.read_csv(bitcoin_csv)
dash_df = pd.read_csv(dash_csv)
86/4: bitcoin_df.head()
86/5: dash_df.head()
86/6:
# Merge the two DataFrames together based on the Dates they share
merge_df = pd.meger(bitcoin_df, dash_df, on="Date", how="inner")
86/7:
# Merge the two DataFrames together based on the Dates they share
merge_df = pd.meger(bitcoin_df, dash_df, on="Date", how="inner")
merge_df
86/8:
# Merge the two DataFrames together based on the Dates they share
merge_df = pd.merge(bitcoin_df, dash_df, on="Date", how="inner")
merge_df
86/9:
# Merge the two DataFrames together based on the Dates they share
merge_df = pd.merge(bitcoin_df, dash_df, on="Date", how="inner")
merge_df.head()
86/10:
# Rename columns so that they are differentiated
merge_df.rename(columns = {'Open_x': 'Open_bitcoin', 
                           'High_x': 'High_bitcoin', 
                           'Low_x': 'Low_bitcoin',
                           'Close_x': 'Close_bitcoin'})
86/11:
# Merge the two DataFrames together based on the Dates they share
merge_df = pd.merge(bitcoin_df, dash_df, on="Date")
merge_df.head()
88/1:
# Figure out the minimum and maximum views for a TED Talk
print(ted_df["views"].max())
print(ted_df["views"].min())
90/1:
# Import Dependencies
import pandas as pd
90/2:
# Create a path to the csv and read it into a Pandas DataFrame
csv_path = "Resources/ted_talks.csv"
ted_df = pd.read_csv(csv_path)

ted_df.head()
90/3:
# Figure out the minimum and maximum views for a TED Talk
print(ted_df["views"].max())
print(ted_df["views"].min())
90/4:
# Create bins in which to place values based upon TED Talk views

# Create labels for these bins
90/5: # Slice the data and place it into bins
90/6: # Place the data series into a new column inside of the DataFrame
90/7:
# Create a GroupBy object based upon "View Group"


# Find how many rows fall into each bin


# Get the average of each column within the GroupBy object
90/8:
# Slice the data and place it into bins
pd.cut(ted_df["views"], bins, label=bin_label).head()
90/9:
# Slice the data and place it into bins
pd.cut(ted_df["views"], bins, labels=bin_label).head()
91/1:
# Import Dependencies
import pandas as pd
91/2:
# Create a path to the csv and read it into a Pandas DataFrame
csv_path = "Resources/ted_talks.csv"
ted_df = pd.read_csv(csv_path)

ted_df.head()
91/3:
# Figure out the minimum and maximum views for a TED Talk
print(ted_df["views"].max())
print(ted_df["views"].min())
91/4:
# Create bins in which to place values based upon TED Talk views
bins = [0, 199999, 399999, 599999, 799999, 999999,
        1999999, 2999999, 3999999, 4999999, 50000000]

# Create labels for these bins
bin_label = ["0-199k", "200k-399k", "400k-599k", "600k-799k", "800k-999k", "1mil-2mil",
                "2mil-3mil", "3mil-4mil", "4mil-5mil", "5mil-50mil"]
91/5:
# Slice the data and place it into bins
pd.cut(ted_df["views"], bins, labels=bin_label).head()
91/6: # Place the data series into a new column inside of the DataFrame
91/7:
# Create a GroupBy object based upon "View Group"


# Find how many rows fall into each bin


# Get the average of each column within the GroupBy object
92/1:
# Import Dependencies
import pandas as pd
92/2:
# Create a path to the csv and read it into a Pandas DataFrame
csv_path = "Resources/ted_talks.csv"
ted_df = pd.read_csv(csv_path)

ted_df.head()
92/3:
# Figure out the minimum and maximum views for a TED Talk
print(ted_df["views"].max())
print(ted_df["views"].min())
92/4:
# Create bins in which to place values based upon TED Talk views
bins = [0, 199999, 399999, 599999, 799999, 999999,
        1999999, 2999999, 3999999, 4999999, 50000000]

# Create labels for these bins
bin_label = ["0-199k", "200k-399k", "400k-599k", "600k-799k", "800k-999k", "1mil-2mil",
                "2mil-3mil", "3mil-4mil", "4mil-5mil", "5mil-50mil"]
92/5:
# Slice the data and place it into bins
pd.cut(ted_df["views"], bins, labels=bin_label).head()
92/6:
# Place the data series into a new column inside of the DataFrame
ted_df["view group"] = pd.cut(ted_df["views"], bins, labels=bin_label)
ted_df.head()
92/7:
# Create a GroupBy object based upon "View Group"


# Find how many rows fall into each bin


# Get the average of each column within the GroupBy object
93/1:
# Import Dependencies
import pandas as pd
93/2:
# Create a path to the csv and read it into a Pandas DataFrame
csv_path = "Resources/ted_talks.csv"
ted_df = pd.read_csv(csv_path)

ted_df.head()
93/3:
# Figure out the minimum and maximum views for a TED Talk
print(ted_df["views"].max())
print(ted_df["views"].min())
93/4:
# Create bins in which to place values based upon TED Talk views
bins = [0, 199999, 399999, 599999, 799999, 999999,
        1999999, 2999999, 3999999, 4999999, 50000000]

# Create labels for these bins
bin_label = ["0-199k", "200k-399k", "400k-599k", "600k-799k", "800k-999k", "1mil-2mil",
                "2mil-3mil", "3mil-4mil", "4mil-5mil", "5mil-50mil"]
93/5:
# Slice the data and place it into bins
pd.cut(ted_df["views"], bins, labels=bin_label).head()
93/6:
# Place the data series into a new column inside of the DataFrame
ted_df["view group"] = pd.cut(ted_df["views"], bins, labels=bin_label)
ted_df.head()
93/7:
# Create a GroupBy object based upon "View Group"
ted_group = ted_df.groupby("View Group")

# Find how many rows fall into each bin
print(ted_group["comments"].count())


# Get the average of each column within the GroupBy object
ted_group[["comments", "duration", "languages"]].mean()
94/1:
# Import Dependencies
import pandas as pd
94/2:
# Create a path to the csv and read it into a Pandas DataFrame
csv_path = "Resources/ted_talks.csv"
ted_df = pd.read_csv(csv_path)

ted_df.head()
94/3:
# Figure out the minimum and maximum views for a TED Talk
print(ted_df["views"].max())
print(ted_df["views"].min())
94/4:
# Create bins in which to place values based upon TED Talk views
bins = [0, 199999, 399999, 599999, 799999, 999999,
        1999999, 2999999, 3999999, 4999999, 50000000]

# Create labels for these bins
bin_label = ["0-199k", "200k-399k", "400k-599k", "600k-799k", "800k-999k", "1mil-2mil",
                "2mil-3mil", "3mil-4mil", "4mil-5mil", "5mil-50mil"]
94/5:
# Slice the data and place it into bins
pd.cut(ted_df["views"], bins, labels=bin_label).head()
94/6:
# Place the data series into a new column inside of the DataFrame
ted_df["view group"] = pd.cut(ted_df["views"], bins, labels=bin_label)
ted_df.head()
94/7:
# Create a GroupBy object based upon "View Group"
ted_group = ted_df.groupby("view group")

# Find how many rows fall into each bin
print(ted_group["comments"].count())


# Get the average of each column within the GroupBy object
ted_group[["comments", "duration", "languages"]].mean()
96/1: import pandas as pd
96/2:
# The path to our CSV file
csv_path = "Resources/KickstarterData.csv"

# Read our Kickstarter data into pandas
kickstarter_df = pd.read_csv(csv_path)
kickstarter_df.head()
96/3:
# Get a list of all of our columns for easy reference
kickstarter_df = df.columns.values.tolist()
96/4:
# Get a list of all of our columns for easy reference
df.columns
98/1: import pandas as pd
98/2:
# The path to our CSV file
csv_path = "Resources/KickstarterData.csv"

# Read our Kickstarter data into pandas
kickstarter_df = pd.read_csv(csv_path)
kickstarter_df.head()
98/3:
# Get a list of all of our columns for easy reference
df.columns
98/4:
# Get a list of all of our columns for easy reference
kickstarterdata_df.columns
98/5:
# Get a list of all of our columns for easy reference
kickstarter_df.columns
99/1: import pandas as pd
99/2:
# The path to our CSV file
csv_path = "Resources/KickstarterData.csv"

# Read our Kickstarter data into pandas
kickstarter_df = pd.read_csv(csv_path)
kickstarter_df.head()
99/3:
# Get a list of all of our columns for easy reference
kickstarter_df.columns
99/4:
# Extract "name", "goal", "pledged", "state", "country", "staff_pick",
# "backers_count", and "spotlight"
extracted_kickstarter_df = df.loc["name", "goal", "pledged", "state", "country", "staff_pick", "bakers_count", "spotlight"]
extracted_kickstarter_df
99/5:
# Extract "name", "goal", "pledged", "state", "country", "staff_pick",
# "backers_count", and "spotlight"
extracted_kickstarter_df = df.loc["name", "goal", "pledged", "state", "country", "staff_pick", "bakers_count", "spotlight"]
extracted_kickstarter_df.head()
100/1: import pandas as pd
100/2:
# The path to our CSV file
csv_path = "Resources/KickstarterData.csv"

# Read our Kickstarter data into pandas
kickstarter_df = pd.read_csv(csv_path)
kickstarter_df.head()
100/3:
# Get a list of all of our columns for easy reference
kickstarter_df.columns
100/4:
# Extract "name", "goal", "pledged", "state", "country", "staff_pick",
# "backers_count", and "spotlight"
extracted_kickstarter_df = kickstarter_df.loc["name", "goal", "pledged", "state", "country", "staff_pick", "bakers_count", "spotlight"]
extracted_kickstarter_df.head()
100/5:
# Extract "name", "goal", "pledged", "state", "country", "staff_pick",
# "backers_count", and "spotlight"
extracted_kickstarter_df = kickstarter_df.loc[:, ["name", "goal", "pledged", "state", "country", "staff_pick", "bakers_count", "spotlight"]]
extracted_kickstarter_df.head()
100/6:
# Extract "name", "goal", "pledged", "state", "country", "staff_pick",
# "backers_count", and "spotlight"
extracted_kickstarter_df = kickstarter_df.loc[:, ['name', 'goal', 'pledged', 'state', 'country', 'staff_pick', 'bakers_count', 'spotlight']]
extracted_kickstarter_df.head()
101/1: import pandas as pd
101/2:
# The path to our CSV file
csv_path = "Resources/KickstarterData.csv"

# Read our Kickstarter data into pandas
kickstarter_df = pd.read_csv(csv_path)
kickstarter_df.head()
101/3:
# Get a list of all of our columns for easy reference
kickstarter_df.columns
101/4:
# Extract "name", "goal", "pledged", "state", "country", "staff_pick",
# "backers_count", and "spotlight"
extracted_kickstarter_df = kickstarter_df.loc[:, ['name', 'goal', 'pledged', 'state', 'country', 'staff_pick', 'bakers_count', 'spotlight']]
extracted_kickstarter_df.head()
102/1: import pandas as pd
102/2:
# The path to our CSV file
file = "Resources/KickstarterData.csv"

# Read our Kickstarter data into pandas
df = pd.read_csv(file)
df.head()
102/3:
# Get a list of all of our columns for easy reference
df.columns
102/4:
# Extract "name", "goal", "pledged", "state", "country", "staff_pick",
# "backers_count", and "spotlight"
reduced_kickstarter_df = df.loc[:, ["name", "goal", "pledged",
                                    "state", "country", "staff_pick", "backers_count", "spotlight"]]
reduced_kickstarter_df
102/5:
# Remove projects that made no money at all
reduced_kickstarter_df = reduced_kickstarter_df.loc[(
    reduced_kickstarter_df["pledged"] > 0)]
reduced_kickstarter_df.head()
102/6:
# Collect only those projects that were hosted in the US.

# Create a list of the columns
columns = [
    "name", "goal", "pledged", "state", 
    "country", "staff_pick", "backers_count", "spotlight"]

#  Create a new df for "US" with the columns. 
hosted_in_us_df = reduced_kickstarter_df.loc[reduced_kickstarter_df["country"] == "US",  columns]
hosted_in_us_df.head()
102/7:
# Create a new column that finds the average amount pledged to a project
average_donation = hosted_in_us_df['pledged'] / hosted_in_us_df['backers_count']
average_donation
102/8:
# Create a new column that finds the average amount pledged to a project
hosted_in_us_df["average_donation"] = hosted_in_us_df['pledged'] / \
    hosted_in_us_df['backers_count']
102/9:
# First convert "average_donation", "goal", and "pledged" columns to float
# Then Format to go to two decimal places, include a dollar sign, and use comma notation

hosted_in_us_df["average_donation"] = hosted_in_us_df["average_donation"].astype(float).map(
    "${:,.2f}".format)
hosted_in_us_df["goal"] = hosted_in_us_df["goal"].astype(float).map("${:,.2f}".format)
hosted_in_us_df["pledged"] = hosted_in_us_df["pledged"].astype(float).map("${:,.2f}".format)
102/10: hosted_in_us_df.head()
102/11:
# Calculate the total number of backers for all US projects
hosted_in_us_df["backers_count"].sum()
102/12:
# Calculate the average number of backers for all US projects
hosted_in_us_df["backers_count"].mean()
102/13:
# Collect only those US campaigns that have been picked as a "Staff Pick"
picked_by_staff_df = hosted_in_us_df.loc[hosted_in_us_df["staff_pick"] == True]
picked_by_staff_df
102/14:
# Group by the state of the campaigns and see if staff picks matter (Seems to matter quite a bit)
state_groups = picked_by_staff_df.groupby("state")
state_groups["name"].count()
103/1:
# Create a reference to the CSV and import it into a Pandas DataFrame
csv_path = "../Resources/EclipseBugs.csv"
pd.read_csv(csv_path)
103/2:
# Create a reference to the CSV and import it into a Pandas DataFrame
csv_path = "../Resources/EclipseBugs.csv"
debug_df = pd.read_csv(csv_path)
debug_df.head()
103/3:
import pandas as pd

# Create a reference to the CSV and import it into a Pandas DataFrame
csv_path = "../Resources/EclipseBugs.csv"
debug_df = pd.read_csv(csv_path)
debug_df.head()
103/4:
import pandas as pd

# Create a reference to the CSV and import it into a Pandas DataFrame
csv_path = "../Resources/EclipseBugs.csv"
debug_df = pd.read_csv(csv_path)
debug_df.head()
103/5:
import pandas as pd

# Create a reference to the CSV and import it into a Pandas DataFrame
csv_path = "Resources/EclipseBugs.csv"
debug_df = pd.read_csv(csv_path)
debug_df.head()
103/6:
# Finding the average number of comments per bug
average_comments = eclipse_df["Number of Comments"].mean()
average_comments
103/7:
import pandas as pd

# Create a reference to the CSV and import it into a Pandas DataFrame
csv_path = "Resources/EclipseBugs.csv"
eclipse_df = pd.read_csv(csv_path)
eclipse_df.head()
104/1:
import pandas as pd

# Create a reference to the CSV and import it into a Pandas DataFrame
csv_path = "Resources/EclipseBugs.csv"
eclipse_df = pd.read_csv(csv_path)
eclipse_df.head()
104/2:
# Finding the average number of comments per bug
average_comments = eclipse_df["Number of Comments"].mean()
average_comments
104/3:
# Finding the average number of comments per bug
average_comments = eclipse_df["Number of/nComments"].mean()
average_comments
104/4:
# Finding the average number of comments per bug
average_comments = eclipse_df["Number of\nComments"].mean()
average_comments
104/5:
# Grouping the DataFrame by "Assignee"
assignee_group = eclipse_df.groupby("Assignee")

# Count how many of each component Assignees worked on and create DataFrame
assignee_work_df = pd.DataFrame(assignee_group["Component"].value_counts())
assignee_work_df.head()
104/6:
# Rename the "Component" column to "Component Bug Count"
assignee_work_df = assignee_work_df.rename(
    columns={"Component": "Component Bug Count"})
assignee_work_df.head()
104/7:
# Find the percentage of bugs overall fixed by each Assignee
total_bugs = assignee_group["Assignee"].count()
bugs_per_user = assignee_group["Assignee"].value_counts()

user_bug_percent_df = pd.DataFrame((bugs_per_user/total_bugs)*100)
user_bug_percent_df.head()
104/8:
# Rename the "Assignee" column to "Percent of Total Bugs Assigned"
user_bug_percent_df = user_bug_percent_df.rename(
    columns={"Assignee": "Percent of Total Bugs Assigned"})

# Reset the index for this DataFrame so "Assignee" is a column
user_bug_percent_df = user_bug_percent_df.reset_index()
user_bug_percent_df.head()
104/9:
# Find the percentage of bugs overall fixed by each Assignee
total_bugs = len(eclipse_df)
bugs_per_user = assignee_group["Assignee"].counts()

user_bug_percent_df = pd.DataFrame((bugs_per_user/total_bugs)*100)
user_bug_percent_df.head()
104/10:
# Find the percentage of bugs overall fixed by each Assignee
total_bugs = len(eclipse_df)
bugs_per_user = assignee_group["Assignee"].count()

user_bug_percent_df = pd.DataFrame((bugs_per_user/total_bugs)*100)
user_bug_percent_df.head()
104/11:
# Rename the "Assignee" column to "Percent of Total Bugs Assigned"
user_bug_percent_df = user_bug_percent_df.rename(
    columns={"Assignee": "Percent of Total Bugs Assigned"})

# Reset the index for this DataFrame so "Assignee" is a column
user_bug_percent_df = user_bug_percent_df.reset_index()
user_bug_percent_df.head()
104/12:
# Reset the index of "assignee_group" so that "Assignee" and "Component" are columns
assignee_work_df = assignee_work_df.reset_index()
asignee_work_df.head()
104/13:
# Reset the index of "assignee_group" so that "Assignee" and "Component" are columns
assignee_work_df = assignee_work_df.reset_index()
assignee_work_df.head()
104/14:
# Merge the "Percent of Total Bugs Assigned" into the DataFrame
assignee_work_df = assignee_work_df.merge(user_bug_percent_df, on="Component")
assignee_work_df.head()
104/15:
# Merge the "Percent of Total Bugs Assigned" into the DataFrame
assignee_work_df = assignee_work_df.merge(user_bug_percent_df, on="Assignee")
assignee_work_df.head()
106/1:
# Count total schools
total_schools = pycityschools_file_df["school_name"].count()
total_schools
107/1:
# Dependencies
import pandas as pd
107/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
107/3:
# Read and display the CSV with Pandas
pycityschools_file_df = pd.read_csv(pycityschools_file)
pycityschools_file_df.head()
107/4:
# Count total schools
total_schools = pycityschools_file_df["school_name"].count()
total_schools
107/5:
# Read and display the CSV with Pandas
pycityschools_file_df = pd.read_csv(pycityschools_file)
pycityschools_file_df.head(10)
107/6:
# Read and display the CSV with Pandas
pycityschools_file_df = pd.read_csv(pycityschools_file)
pycityschools_file_df.head(16)
107/7:
# Read and display the CSV with Pandas
pycityschools_file_df = pd.read_csv(pycityschools_file)
pycityschools_file_df.head(17)
107/8:
# Read and display the CSV with Pandas
pycityschools_file_df = pd.read_csv(pycityschools_file)
pycityschools_file_df.head()
107/9:
# Read and display the CSV with Pandas
pycityschools_data = pd.read_csv(pycityschools_file)
pycityschools_data()
107/10:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)
pycityschools_data_df.head()
student_data_df.head()
108/1:
# Dependencies
import pandas as pd
108/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
108/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)
pycityschools_data_df.head()
student_data_df.head()
109/1:
# Dependencies
import pandas as pd
109/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
109/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)
pycityschools_data_df.head()
student_data_df.head()
109/4:
# Count total schools
total_schools = pycityschools_file_df["school_name"].count()
total_schools
110/1:
# Dependencies
import pandas as pd
110/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
110/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
110/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
110/5:
# Count total schools
total_schools = pycityschools_file_df["school_name"].count()
total_schools
110/6:
# Count total schools
total_schools = pycityschools_data_complete["school_name"].count()
total_schools
110/7:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].count()
total_students
110/8:
# Count total schools
total_schools = pycityschools_data_complete["school_name"].value_counts()
total_schools
110/9:
# Count total schools
total_schools = pycityschools_data_complete["school_name"].count()
total_schools
110/10:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].value_counts()
total_students
110/11:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].count()
total_students
110/12:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
110/13:
# Calculate the average math score
average_mathscore = pycityschools_data_complete["math_score"].mean()
average_mathscore
110/14:
# Calculate the average reading score
average_readingscore = pycityschools_data_complete["reading_score"].mean()
average_reradingscore
110/15:
# Calculate the average reading score
average_readingscore = pycityschools_data_complete["reading_score"].mean()
average_readingscore
110/16:
# Calculate the average math score
average_mathscore = pycityschools_data_complete["math_score"].mean().round(2)
average_mathscore
110/17:
# Calculate the average math score
average_mathscore = pycityschools_data_complete["math_score"].mean().round(2)
average_mathscore
110/18:
# Calculate the average math score
average_mathscore = pycityschools_data_complete["math_score"].mean()
average_mathscore.round(2)
114/1:
# Dependencies
import pandas as pd
114/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
114/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
114/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
114/5:
# Count total schools
total_schools = pycityschools_data_complete["school_name"].count()
total_schools
114/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].count()
total_students
114/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
114/8:
# Calculate the average math score
average_mathscore = pycityschools_data_complete["math_score"].mean()
average_mathscore.round(2)
114/9:
# Calculate the average math score
average_mathscore = pycityschools_data_complete["math_score"].mean()
average_mathscore
114/10:
# Calculate the average math score
average_mathscore = pycityschools_data_complete["math_score"].mean()
average_mathscore.round()
114/11:
# Calculate the average math score
average_mathscore = pycityschools_data_complete(round["math_score"].mean())
average_mathscore
114/12:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean())
average_mathscore
114/13:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
114/14:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
115/1:
# Calculate the total number of students
total_students = len[pycityschools_data_complete["student_name"]]
total_students
115/2:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].count()
total_students
115/3:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].count()
total_students
119/1:
# Dependencies
import pandas as pd
121/1:
# Dependencies
import pandas as pd
124/1:
# Dependencies
import pandas as pd
127/1:
# Dependencies
import pandas as pd
129/1:
# Dependencies
import pandas as pd
131/1:
# Dependencies
import pandas as pd
134/1:
# Dependencies
import pandas as pd
132/1:
# Dependencies
import pandas as pd
136/1:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
136/2:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
137/1:
# Dependencies
import pandas as pd
139/1:
# Dependencies
import pandas as pd
142/1:
# Dependencies
import pandas as pd
142/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
142/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
143/1:
# Dependencies
import pandas as pd
145/1:
# Dependencies
import pandas as pd
145/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
145/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
145/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
145/5:
# Count total schools
total_schools = pycityschools_data_complete["school_name"].count()
total_schools
145/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].count()
total_students
145/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
145/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
145/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
145/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_percentage = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >= 70] / 
                  len(pycityschools_data_complete
145/11:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].count().unique()
total_students
145/12:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].sum()
total_students
145/13:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].sum()
total_students.head()
145/14:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].count()
total_students
145/15:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >= 70]
math_passing
145/16:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >= 70].count()
math_passing
145/17:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.query("math_score >=70")["School ID"].count() / total_students*100
math_passing
145/18:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.query("math_score >=70")["School ID"].count() / round(total_students*100, 2)
math_passing
145/19:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.query("math_score >=70")["School ID"].count() / total_students*100
math_passing
145/20:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete.query("math_score >=70")["School ID"].count() / total_students*100, 2)
math_passing
145/21:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = round(pycityschools_data_complete.query("reading_score >=70")["School ID"].count() / total_students*100, 2)
reading_passing
145/22:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round(pycityschools_data_complete.query("reading_score >=70" & "math_score >=70")["School ID"].count() / total_students*100)
overall_passing
145/23:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = (reading_passing + math_passing) / 2
overall_passing
145/24:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((reading_passing + math_passing) / 2, 2)
overall_passing
145/25:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [math_passing],
                          "% of Students with Passing Reading Score": [reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
145/26:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].sum()
total_students
145/27:
# Calculate the total number of students
total_students = pycityschools_data_complete["student_name"].count()
total_students
145/28:
# Count total schools
total_schools = pycityschools_data_complete["School ID"].count()
total_schools
145/29:
# Count total schools
total_schools = pycityschools_data_complete["School ID"].count()
total_schools
145/30:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
149/1:
# Dependencies
import pandas as pd
import numpy as np
149/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
149/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
149/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
149/5:
# Count total schools
total_schools = pycityschools_data_complete["School ID"].count()
total_schools
149/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
149/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
149/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
149/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
149/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete.query("math_score >=70")["School ID"].count() / total_students*100, 2)
math_passing
149/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = round(pycityschools_data_complete.query("reading_score >=70")["School ID"].count() / total_students*100, 2)
reading_passing
149/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((reading_passing + math_passing) / 2, 2)
overall_passing
149/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [math_passing],
                          "% of Students with Passing Reading Score": [reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
149/14: # Give the displayed data cleaner formatting
149/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
149/16:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].astype(float).map("{:,.2f}".format)
149/17:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].astype(float).map("{:,.2f}".format)
summary_df
149/18:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].astype(str).map("{:,.2f}".format)
summary_df
149/19:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].map("{:,.2f}".format)
summary_df
154/1:
import numpy as np
import matplotlib.pyplot as plt
154/2:
x_axis = np.arange(1,13,1)
x_axis
154/3: points = [39, 42, 51, 62, 72, 82, 86, 84, 77, 65, 55, 44]
154/4:
plt.plot(x_axis, point)
plt.show()
154/5:
plt.plot(x_axis, points)
plt.show()
154/6:
# Use a list comprehension to convert the temperature to degrees Celsius.
points_celsius = [(x-32) * 0.56 for x in points]
points_celsius
154/7:
# Plot using Celsius
plt.plot(x_axis, points_celsius)
plt.show()
154/8:
# Plot both
plt.plot(x_axis, points)
plt.plot(x_axis, points_celsius)
plt.show()
154/9:
# Use a list comprehension to convert the temperature to degrees Celsius.
points_celsius = [(temp-32) * 0.56 for temp in points]
points_celsius
155/1:
import numpy as np
import matplotlib.pyplot as plt
155/2:
x_axis = np.arange(1,13,1)
x_axis
155/3: points_f = [39, 42, 51, 62, 72, 82, 86, 84, 77, 65, 55, 44]
155/4:
plt.plot(x_axis, points_f)
plt.show()
155/5:
# Use a list comprehension to convert the temperature to degrees Celsius.
points_c = [(temp-32) * 0.56 for temp in points]
points_c
155/6:
# Use a list comprehension to convert the temperature to degrees Celsius.
points_c = [(temp-32) * 0.56 for temp in points_f]
points_c
155/7:
# Plot using Celsius
plt.plot(x_axis, points_c)
plt.show()
155/8:
# Plot both
plt.plot(x_axis, points_f)
plt.plot(x_axis, points_c)
plt.show()
159/1:
# Include this line to make plots interactive
%matplotlib notebook
159/2:
#Dependencies
import matplotlib.pyplot as plt
import numpy as np
159/3:
# Set x-axis 
x_axis = np.arange(1,31)
x_axis
159/4:
#average weather
points_f = [39, 42, 51, 62, 72, 82, 86, 84, 77, 65, 55, 44]
159/5:
# Convert to celcius 
points_c = [(temp-32) * 0.56 for temp in points_f]
points_c
159/6:
farenheit, = plt.plot(x_axis, points_f, marker="+", color="blue", linewidth=1, label="Fahreneit")
celsius, = plt.plot(X_axis, points_c, marke="s", color="Red", linewidth=1, label="Celsius")
160/1:
farenheit, = plt.plot(x_axis, points_f, marker="+", color="blue", linewidth=1, label="Fahreneit")
celsius, = plt.plot(X_axis, points_c, marke="s", color="Red", linewidth=1, label="Celsius")
160/2:
fahrenheit, = plt.plot(x_axis, points_F, marker="+",color="blue", linewidth=1, label="Fahreneit")
celsius, = plt.plot(x_axis, points_C, marker="s", color="Red", linewidth=1, label="Celsius")
161/1:
# Include this line to make plots interactive
%matplotlib notebook
161/2:
# Dependencies
import matplotlib.pyplot as plt
import numpy as np
161/3:
# Set x axis to numerical value for month
x_axis = np.arange(1,13,1)
x_axis
161/4:
# Avearge weather temp
points_F = [39, 42, 51, 62, 72, 82, 86, 84, 77, 65, 55, 44]
161/5:
# Convert to Celsius C = (F-32) * 0.56
points_C = [(x-32) * 0.56 for x in points_F]
points_C
161/6:
# Create a handle for each plot
fahrenheit, = plt.plot(x_axis, points_F, marker="+",color="blue", linewidth=1, label="Fahreneit")
celsius, = plt.plot(x_axis, points_C, marker="s", color="Red", linewidth=1, label="Celsius")
161/7:
# Set our legend to where the chart thinks is best
plt.legend(handles=[fahrenheit, celsius], loc="best")
161/8:
# Create labels for the X and Y axis
plt.xlabel("Months")
plt.ylabel("Degrees")
161/9:
# Save and display the chart
plt.savefig("../Images/avg_temp.png")
plt.show()
162/1:
# Include this line to make plots interactive
%matplotlib notebook
162/2:
#Dependencies
import matplotlib.pyplot as plt
import numpy as np
162/3:
# Set x-axis 
x_axis = np.arange(1,31)
x_axis
162/4:
#average weather
points_f = [39, 42, 51, 62, 72, 82, 86, 84, 77, 65, 55, 44]
162/5:
# Convert to celcius 
points_c = [(temp-32) * 0.56 for temp in points_f]
points_c
162/6:
fahrenheit, = plt.plot(x_axis, points_F, marker="+",color="blue", linewidth=1, label="Fahreneit")
celsius, = plt.plot(x_axis, points_C, marker="s", color="Red", linewidth=1, label="Celsius")
163/1:
# Include this line to make plots interactive
%matplotlib notebook
163/2:
#Dependencies
import matplotlib.pyplot as plt
import numpy as np
163/3:
# Set x-axis 
x_axis = np.arange(1,31)
x_axis
163/4:
#average weather
points_f = [39, 42, 51, 62, 72, 82, 86, 84, 77, 65, 55, 44]
163/5:
# Convert to celcius 
points_c = [(temp-32) * 0.56 for temp in points_f]
points_c
163/6:
fahrenheit, = plt.plot(x_axis, points_f, marker="+",color="blue", linewidth=1, label="Fahreneit")
celsius, = plt.plot(x_axis, points_c, marker="s", color="Red", linewidth=1, label="Celsius")
163/7:
# Set x-axis 
x_axis = np.arange(1,31,1)
x_axis
163/8:
fahrenheit, = plt.plot(x_axis, points_f, marker="+",color="blue", linewidth=1, label="Fahreneit")
celsius, = plt.plot(x_axis, points_c, marker="s", color="Red", linewidth=1, label="Celsius")
165/1:
# Include this line to make plots interactive
%matplotlib notebook
165/2:
#Dependencies
import matplotlib.pyplot as plt
import numpy as np
165/3:
# Set x-axis 
x_axis = np.arange(1,31,1)
x_axis
165/4:
#average weather
points_f = [39, 42, 51, 62, 72, 82, 86, 84, 77, 65, 55, 44]
165/5:
# Convert to celcius 
points_c = [(temp-32) * 0.56 for temp in points_f]
points_c
165/6:
fahrenheit, = plt.plot(x_axis, points_f, marker="+",color="blue", linewidth=1, label="Fahreneit")
celsius, = plt.plot(x_axis, points_c, marker="s", color="Red", linewidth=1, label="Celsius")
166/1:
fahrenheit_handle, = plt.plot(x_axis, points_f, marker="+",color="blue", linewidth=1, label="Fahreneit")
celsius_handle, = plt.plot(x_axis, points_c, marker="s", color="Red", linewidth=1, label="Celsius")
166/2: plt.legend(handles=[fahrenheit, celsius], loc="best")
167/1:
# Include this line to make plots interactive
%matplotlib notebook
167/2:
#Dependencies
import matplotlib.pyplot as plt
import numpy as np
167/3:
# Set x-axis 
x_axis = np.arange(1,31,1)
x_axis
167/4:
#average weather
points_f = [39, 42, 51, 62, 72, 82, 86, 84, 77, 65, 55, 44]
167/5:
# Convert to celcius 
points_c = [(temp-32) * 0.56 for temp in points_f]
points_c
167/6:
fahrenheit_handle, = plt.plot(x_axis, points_f, marker="+",color="blue", linewidth=1, label="Fahreneit")
celsius_handle, = plt.plot(x_axis, points_c, marker="s", color="Red", linewidth=1, label="Celsius")
168/1:
# Include this line to make plots interactive
%matplotlib notebook
168/2:
#Dependencies
import matplotlib.pyplot as plt
import numpy as np
168/3:
# Set x-axis 
x_axis = np.arange(1,31,1)
x_axis
168/4:
#average weather
points_f = [39, 42, 51, 62, 72, 82, 86, 84, 77, 65, 55, 44]
168/5:
# Convert to celcius 
points_c = [(temp-32) * 0.56 for temp in points_f]
points_c
168/6:
fahrenheit_handle, = plt.plot(x_axis, points_f, marker="+",color="blue", linewidth=1, label="Fahreneit")
celsius_handle, = plt.plot(x_axis, points_c, marker="s", color="Red", linewidth=1, label="Celsius")
169/1:
# Include this line to make plots interactive
%matplotlib notebook
169/2:
#Dependencies
import matplotlib.pyplot as plt
import numpy as np
169/3:
# Set x-axis 
x_axis = np.arange(1, 31, 1)
x_axis
169/4:
#average weather
points_f = [39, 42, 51, 62, 72, 82, 86, 84, 77, 65, 55, 44]
169/5:
# Convert to celcius 
points_c = [(temp-32) * 0.56 for temp in points_f]
points_c
169/6:
fahrenheit_handle, = plt.plot(x_axis, points_f, marker="+",color="blue", linewidth=1, label="Fahreneit")
celsius_handle, = plt.plot(x_axis, points_c, marker="s", color="Red", linewidth=1, label="Celsius")
172/1: %matplotlib notebook
172/2:
import matplotlib.pyplot as plt
import numpy as np
172/3:
# Create x and y axis
time = np.arange(1,130,10)
danger_drop_speeds = [9,8, 90, 85, 80, 70, 70, 65, 55, 60, 70, 65, 50]
railgun_speeds = [75, 70, 60, 65, 60, 45, 55, 50, 40, 40, 35, 35, 30]
172/4:
# plot the chart
danger_drop, = plt.plot(time, danger_drop_speeds, color="red", label="Danger Drop")
railgun, = plt.plot(time, railgun_speeds, color="blue", label="RailGun")
173/1: %matplotlib notebook
173/2:
import matplotlib.pyplot as plt
import numpy as np
173/3:
# Create x and y axis
time = np.arange(1,130,10)
danger_drop_speeds = [9,8, 90, 85, 80, 70, 70, 65, 55, 60, 70, 65, 50]
railgun_speeds = [75, 70, 60, 65, 60, 45, 55, 50, 40, 40, 35, 35, 30]
173/4:
# plot the chart
danger_drop, = plt.plot(time, danger_drop_speeds, color="red", label="Danger Drop")
railgun, = plt.plot(time, railgun_speeds, color="blue", label="RailGun")
173/5:
# Add labels and titles
plt.title("Coaster Speed over Time")
plt.xlabel("Coaster Runtime")
plt.ylabel("Speed (MPH)")
173/6:
# Set limits
plt.xlim(0,120)
plt.ylim(5, 95)
173/7:
# Create legend for the Chart
plt.legend(handles=[danger_drop, railgun], loc="best")
173/8:
# add grid lines
plt.grid()
173/9: plt.show()
176/1: %matplotlib notebook
176/2:
import matplotlib.pyplot as plt
import numpy as np
176/3:
cities = ["New Orleans", "Milwaukee", "Omaha", "Pittsburgh", "Toledo"]
bars_in_cities = [8.6, 8.5, 8.3, 7.9, 7.2]
x_axis = np.arange(len(bars_in_cities))
176/4:
# Create a bar chart based upon the above data
plt.bar(x_axis, bars_in_cities, color="g", alpha=0.5, align="center")
176/5:
# Create the ticks for our bar chart's x axis
tick_locations = [value for value in x_axis]
plt.xticks(tick_locations, cities)
176/6:
# Set the limits of the x axis
plt.xlim(-0.75, len(x_axis)-0.25)
176/7:
# Set the limits of the y axis
plt.ylim(0, max(bars_in_cities)+0.4)
176/8:
# Give the chart a title, x label, and y label
plt.title("Density of Bars in Cities")
plt.xlabel("Cities")
plt.ylabel("Bars Per 10,000 Households")
176/9:
# Save an image of the chart and print it to the screen
plt.savefig("../Images/BarDensity.png")
plt.show()
177/1: %matplotlib notebook
177/2:
import matplotlib.pyplot as plt
import numpy as np
177/3:
cities = ["New Orleans", "Milwaukee", "Omaha", "Pittsburgh", "Toledo"]
bars_in_cities = [8.6, 8.5, 8.3, 7.9, 7.2]
x_axis = np.arange(len(bars_in_cities))
177/4:
# Create a bar chart based upon the above data
plt.bar(x_axis, bars_in_cities, color="g", alpha=0.5, align="center")
177/5:
# Create the ticks for our bar chart's x axis
tick_locations = [value for value in x_axis]
plt.xticks(tick_locations, cities)
177/6:
# Set the limits of the x axis
plt.xlim(-0.75, len(x_axis)-0.25)
177/7:
# Set the limits of the y axis
plt.ylim(0, max(bars_in_cities)+5)
177/8:
# Give the chart a title, x label, and y label
plt.title("Density of Bars in Cities")
plt.xlabel("Cities")
plt.ylabel("Bars Per 10,000 Households")
177/9:
# Save an image of the chart and print it to the screen
plt.savefig("../Images/BarDensity.png")
plt.show()
178/1: %matplotlib notebook
178/2:
import matplotlib.pyplot as plt
import numpy as np
178/3:
cities = ["New Orleans", "Milwaukee", "Omaha", "Pittsburgh", "Toledo"]
bars_in_cities = [8.6, 8.5, 8.3, 7.9, 7.2]
x_axis = np.arange(len(bars_in_cities))
178/4:
# Create a bar chart based upon the above data
plt.bar(x_axis, bars_in_cities, color="g", alpha=0.5, align="center")
178/5:
# Create the ticks for our bar chart's x axis
tick_locations = [value for value in x_axis]
plt.xticks(tick_locations, cities)
178/6:
# Set the limits of the x axis
plt.xlim(-0.75, len(x_axis)-0.25)
178/7:
# Set the limits of the y axis
plt.ylim(0, max(bars_in_cities)+1)
178/8:
# Give the chart a title, x label, and y label
plt.title("Density of Bars in Cities")
plt.xlabel("Cities")
plt.ylabel("Bars Per 10,000 Households")
178/9:
# Save an image of the chart and print it to the screen
plt.savefig("../Images/BarDensity.png")
plt.show()
181/1: %matplotlib notebook
181/2:
import matplotlib.pyplot as plt
import numpy as np
181/3:
pies = ["Apple", "Pumpkin", "Chocolate Creme", "Cherry", "Apple Crumb",
        "Pecan", "Lemon Meringue", "Blueberry", "Key Lime", "Peach"]
pie_votes = [47, 37, 32, 27, 25, 24, 24, 21, 18, 16]
colors = ["yellow", "green", "lightblue", "orange", "red",
          "purple", "pink", "yellowgreen", "lightskyblue", "lightcoral"]
explode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0)
181/4:
# Tell matplotlib to create a pie chart based upon the above data
plt.pie(pie_votes, explode=explode, labels=pies, colors=colors,
       autopct="%1.2f%%", shadow=True, startangle=140)

# Create axes which are equal so we have a perfect circle
plt.axis("equal")

# Save an image of our chart and print the final product to the screen
plt.savefig("../Images/PyPies.png")
184/1: %matplotlib notebook
184/2:
import matplotlib.pyplot as plt
import numpy as np
184/3:
temp = [14.2, 16.4, 11.9, 15.2, 18.5, 22.1, 19.4, 25.1, 23.4, 18.1, 22.6, 17.2]
sales = [215, 325, 185, 332, 406, 522, 412, 614, 544, 421, 445, 408]
184/4:
# Tell matplotlib to create a scatter plot based upon the above data
plt.scatter(temp, sales, marker="o", facecolors="purple", edgecolors="blue")
184/5:
# Set the upper and lower limits of our y axis
plt.ylim(180,620)
184/6:
# Set the upper and lower limits of our x axis
plt.xlim(11,26)
184/7:
# Create a title, x label, and y label for our chart
plt.title("Ice Cream Sales v Temperature")
plt.xlabel("Temperature")
plt.ylabel("Sales (Dollars)")
184/8:
# Save an image of the chart and print to screen
# NOTE: If your plot shrinks after saving an image,
# update matplotlib to 2.2 or higher,
# or simply run the above cells again.
plt.savefig("../Images/IceCreamSales.png")
plt.show()
185/1: %matplotlib notebook
185/2:
import matplotlib.pyplot as plt
import numpy as np
185/3:
temp = [14.2, 16.4, 11.9, 15.2, 18.5, 22.1, 19.4, 25.1, 23.4, 18.1, 22.6, 17.2]
sales = [215, 325, 185, 332, 406, 522, 412, 614, 544, 421, 445, 408]
185/4:
# Tell matplotlib to create a scatter plot based upon the above data
plt.scatter(temp, sales, marker="o", facecolors="purple", edgecolors="blue")
185/5:
# Set the upper and lower limits of our y axis
plt.ylim(150,620)
185/6:
# Set the upper and lower limits of our x axis
plt.xlim(11,26)
185/7:
# Create a title, x label, and y label for our chart
plt.title("Ice Cream Sales vs. Temperature")
plt.xlabel("Temperature")
plt.ylabel("Sales (Dollars)")
185/8:
# Save an image of the chart and print to screen
# NOTE: If your plot shrinks after saving an image,
# update matplotlib to 2.2 or higher,
# or simply run the above cells again.
plt.savefig("../Images/IceCreamSales.png")
plt.show()
186/1: %matplotlib notebook
186/2:
import matplotlib.pyplot as plt
import numpy as np
186/3:
temp = [14.2, 16.4, 11.9, 15.2, 18.5, 22.1, 19.4, 25.1, 23.4, 18.1, 22.6, 17.2]
sales = [215, 325, 185, 332, 406, 522, 412, 614, 544, 421, 445, 408]
186/4:
# Tell matplotlib to create a scatter plot based upon the above data
plt.scatter(temp, sales, marker="o", facecolors="purple", edgecolors="blue")
186/5:
# Set the upper and lower limits of our y axis
plt.ylim(150,640)
186/6:
# Set the upper and lower limits of our x axis
plt.xlim(11,26)
186/7:
# Create a title, x label, and y label for our chart
plt.title("Ice Cream Sales vs. Temperature")
plt.xlabel("Temperature")
plt.ylabel("Sales (Dollars)")
186/8:
# Save an image of the chart and print to screen
# NOTE: If your plot shrinks after saving an image,
# update matplotlib to 2.2 or higher,
# or simply run the above cells again.
plt.savefig("../Images/IceCreamSales.png")
plt.show()
189/1: %matplotlib notebook
189/2:
# Dependencies
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
189/3:
# Load in csv
rain_df = pd.read_csv("../Resources/avg_rain_state.csv")
rain_df.head()
189/4:
# Create a list indicating where to write x labels & set figure size
plt.figure(figsize=(20,3))
plt.bar(x_axis, rain_df["Inches"], color='b', alpha=0.5, align="edge")
plt.xticks(tick_locations, rain_df["State"], rotation="vertical")
190/1: %matplotlib notebook
190/2:
# Dependencies
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
190/3:
# Load in csv
rain_df = pd.read_csv("../Resources/avg_rain_state.csv")
rain_df.head()
190/4:
# Set x axis and tick locations
x_axis = np.arange(len(rain_df))
tick_locations = [value+0.4 for value in x_axis]
190/5:
# Create a list indicating where to write x labels & set figure size
plt.figure(figsize=(20,3))
plt.bar(x_axis, rain_df["Inches"], color='b', alpha=0.5, align="edge")
plt.xticks(tick_locations, rain_df["State"], rotation="vertical")
190/6:
# set x and y limits
plt.xlim(-0.25, len(x_axis))
plt.ylim(0, max(rain_df["Inches"])+10)
191/1: %matplotlib notebook
191/2:
# Dependencies
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
191/3:
# Load in csv
rain_df = pd.read_csv("../Resources/avg_rain_state.csv")
rain_df.head()
191/4:
# Set x axis and tick locations
x_axis = np.arange(len(rain_df))
tick_locations = [value+0.4 for value in x_axis]
191/5:
# Create a list indicating where to write x labels & set figure size
plt.figure(figsize=(20,3))
plt.bar(x_axis, rain_df["Inches"], color='b', alpha=0.5, align="edge")
plt.xticks(tick_locations, rain_df["State"], rotation="vertical")
191/6:
# set x and y limits
plt.xlim(-0.25, len(x_axis))
plt.ylim(0, max(rain_df["Inches"])+10)
191/7:
# Save our graph and display it
plt.tight_layout()
plt.savefig("../Images/avg_state_rain.png")
plt.show()
156/1:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete.query("math_score >=70")["School ID"].count() / total_students, 2)*100
math_passing
156/2:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete.query("math_score >=70")["School ID"].count() / total_students, 2)
math_passing
156/3:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete.query("math_score >=70")["School ID"].count() / total_students*100, 2)
math_passing
192/1:
# Dependencies
import pandas as pd
import numpy as np
192/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
192/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
192/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
192/5:
# Count total schools
total_schools = pycityschools_data_complete["School ID"].count()
total_schools
192/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
192/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
192/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
192/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
192/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete.query("math_score >=70")["School ID"].count() / total_students*100, 2)
math_passing
192/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = round(pycityschools_data_complete.query("reading_score >=70")["School ID"].count() / total_students*100, 2)
reading_passing
192/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((reading_passing + math_passing) / 2, 2)
overall_passing
192/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [math_passing],
                          "% of Students with Passing Reading Score": [reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
192/14:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].map("{:,.2f}".format)
summary_df
192/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
192/16:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].map("{:,.1f}".format)
summary_df
193/1:
# Dependencies
import pandas as pd
import numpy as np
193/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
193/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
193/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
193/5:
# Count total schools
total_schools = pycityschools_data_complete["School ID"].count()
total_schools
193/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
193/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
193/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
193/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
193/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete.query("math_score >=70")["School ID"].count() / total_students*100, 2)
math_passing
193/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = round(pycityschools_data_complete.query("reading_score >=70")["School ID"].count() / total_students*100, 2)
reading_passing
193/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((reading_passing + math_passing) / 2, 2)
overall_passing
193/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [math_passing],
                          "% of Students with Passing Reading Score": [reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
193/14:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].map("{:,.2f}".format)
summary_df
193/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
193/16:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].map("{:,.2f}".format)
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df
194/1:
# Dependencies
import pandas as pd
import numpy as np
194/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
194/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
194/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
194/5:
# Count total schools
total_schools = pycityschools_data_complete["School ID"].count()
total_schools
194/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
194/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
194/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
194/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
194/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete.query("math_score >=70")["School ID"].count() / total_students*100, 2)
math_passing
194/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = round(pycityschools_data_complete.query("reading_score >=70")["School ID"].count() / total_students*100, 2)
reading_passing
194/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((reading_passing + math_passing) / 2, 2)
overall_passing
194/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [math_passing],
                          "% of Students with Passing Reading Score": [reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
194/14:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].map("{:,.2f}".format)
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df
194/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
195/1:
# Dependencies
import pandas as pd
import numpy as np
195/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
195/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
195/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
195/5:
# Count total schools
total_schools = pycityschools_data_complete["School ID"].count()
total_schools
195/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
195/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
195/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
195/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
195/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete.query("math_score >=70")["School ID"].count() / total_students*100, 2)
math_passing
195/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = round(pycityschools_data_complete.query("reading_score >=70")["School ID"].count() / total_students*100, 2)
reading_passing
195/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((reading_passing + math_passing) / 2, 2)
overall_passing
195/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [math_passing],
                          "% of Students with Passing Reading Score": [reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
195/14:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].map("{:,.2f}".format)
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df
195/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
196/1:
# Dependencies
import pandas as pd
import numpy as np
196/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
196/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
196/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
196/5:
# Count total schools
total_schools = pycityschools_data_complete["School ID"].count()
total_schools
196/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
196/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
196/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
196/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
196/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete("math_score >=70")["School ID"].count() / total_students*100, 2)
math_passing
197/1:
# Dependencies
import pandas as pd
import numpy as np
197/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
197/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
197/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
197/5:
# Count total schools
total_schools = pycityschools_data_complete["School ID"].count()
total_schools
197/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
197/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
197/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
197/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
197/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete("math_score >=70")["School ID"].count() / total_students*100, 2)
math_passing
198/1:
# Dependencies
import pandas as pd
import numpy as np
198/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
198/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
198/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
198/5:
# Count total schools
total_schools = pycityschools_data_complete["School ID"].count()
total_schools
198/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
198/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
198/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
198/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
198/10:
# Calculate the percentage of students with a passing math score (70 or greater)
# math_passing = round(pycityschools_data_complete("math_score >=70")["School ID"].count() / total_students*100, 2)
# math_passing
198/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = round(pycityschools_data_complete("reading_score >=70")["School ID"].count() / total_students*100, 2)
reading_passing
199/1:
# Dependencies
import pandas as pd
import numpy as np
199/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
199/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
199/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
199/5:
# Count total schools
total_schools = pycityschools_data_complete["School ID"].count()
total_schools
199/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
199/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
199/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
199/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
199/10:
# Calculate the percentage of students with a passing math score (70 or greater)
# math_passing = round(pycityschools_data_complete("math_score >=70")["School ID"].count() / total_students*100, 2)
# math_passing
199/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
# reading_passing = round(pycityschools_data_complete("reading_score >=70")["School ID"].count() / total_students*100, 2)
# reading_passing
199/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
# overall_passing = round((reading_passing + math_passing) / 2, 2)
# overall_passing
199/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [math_passing],
                          "% of Students with Passing Reading Score": [reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
199/14:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete("math_score">=70)["School ID"].count() / total_students*100, 2)
math_passing
199/15:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = round(pycityschools_data_complete("math_score")["School ID"]>=70 / total_students*100, 2)
math_passing
199/16:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math score"] >=70]["math score"].count()
percent_math_passing = (math_passing/total_students) * 100
199/17:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
199/18:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
199/19:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = round(math_passing/total_students) * 100, 2)
percent_math_passing
199/20:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = round((math_passing/total_students) * 100, 2))
percent_math_passing
199/21:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
199/22:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count().round(2)
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
199/23:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count().round(2)
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
199/24:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = round([math_passing/total_students] * 100, 2)
percent_math_passing
199/25:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
199/26:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
percent_reading_passing = (reading_passing/total_students) * 100
perecent_reading_passing
199/27:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
percent_reading_passing = (reading_passing/total_students) * 100
percent_reading_passing
199/28:
# Count total schools
total_schools = pycityschools_data_complete["School ID"].unique().count()
total_schools
199/29:
# Count total schools
unique_schools = pycityschools_data_complete["School ID"].unique()
total_schools = unique_schools.count()
total_schools
199/30:
# Count total schools
unique_schools = pycityschools_data_complete["School ID"].unique()
total_schools = len(unique_schools)
total_schools
199/31:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
200/1:
# Dependencies
import pandas as pd
import numpy as np
200/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
200/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
200/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
200/5:
# Count total schools
unique_schools = pycityschools_data_complete["School ID"].unique()
total_schools = len(unique_schools)
total_schools
200/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
200/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
200/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
200/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
200/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
200/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
percent_reading_passing = (reading_passing/total_students) * 100
percent_reading_passing
200/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
# overall_passing = round((reading_passing + math_passing) / 2, 2)
# overall_passing
200/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [math_passing],
                          "% of Students with Passing Reading Score": [reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
200/14:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
200/15:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
200/16:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
201/1:
# Dependencies
import pandas as pd
import numpy as np
201/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
201/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
201/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
201/5:
# Count total schools
unique_schools = pycityschools_data_complete["School ID"].unique()
total_schools = len(unique_schools)
total_schools
201/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
201/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
201/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
201/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
201/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] <=70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
201/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] <=70]["reading_score"].count()
percent_reading_passing = (reading_passing/total_students) * 100
percent_reading_passing
201/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
201/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
201/14:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].map("{:,.2f}".format)
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df
201/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
202/1:
# Dependencies
import pandas as pd
import numpy as np
202/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
202/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
202/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
202/5:
# Count total schools
unique_schools = pycityschools_data_complete["School ID"].unique()
total_schools = len(unique_schools)
total_schools
202/6:
# Calculate the total number of students
total_students = pycityschools_data_complete["size"].sum()
total_students
202/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
202/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
202/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
202/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
202/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
percent_reading_passing = (reading_passing/total_students) * 100
percent_reading_passing
202/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
202/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
202/14:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].map("{:,.2f}".format)
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df
202/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
202/16:
# Calculate the total number of students
unique_students = pycityschools_data_complete["student_name"].unique()
total_students = len(unique_students)
total_students
203/1:
# Dependencies
import pandas as pd
import numpy as np
203/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
203/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
203/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
203/5:
# Count total schools
unique_schools = pycityschools_data_complete["School ID"].unique()
total_schools = len(unique_schools)
total_schools
203/6:
# Calculate the total number of students
unique_students = pycityschools_data_complete["student_name"].unique()
total_students = len(unique_students)
total_students
203/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
203/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
203/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
203/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
203/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
percent_reading_passing = (reading_passing/total_students) * 100
percent_reading_passing
203/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
203/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
203/14:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].map("{:,.2f}".format)
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df
203/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
203/16:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70].count()
percent_reading_passing = (reading_passing/total_students) * 100
percent_reading_passing
203/17:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
203/18:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
percent_reading_passing = (reading_passing/total_students) * 100
percent_reading_passing
203/19:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
reading_passing
percent_reading_passing = (reading_passing/total_students) * 100
percent_reading_passing
203/20:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
reading_passing
# percent_reading_passing = (reading_passing/total_students) * 100
# percent_reading_passing
204/1:
# Dependencies
import pandas as pd
import numpy as np
204/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
204/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
204/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
204/5:
# Count total schools
unique_schools = pycityschools_data_complete["School ID"].unique()
total_schools = len(unique_schools)
total_schools
204/6:
# Calculate the total number of students
unique_students = pycityschools_data_complete["student_name"].unique()
total_students = len(unique_students)
total_students
204/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
204/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
204/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
204/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
204/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
reading_passing
# percent_reading_passing = (reading_passing/total_students) * 100
# percent_reading_passing
204/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
204/13:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
percent_reading_passing = (reading_passing/total_students) * 100
percent_reading_passing
204/14:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
204/15:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
percent_reading_passing = (reading_passing/total_students)
percent_reading_passing
204/16:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
percent_reading_passing = (total_students/reading_passing)*100
percent_reading_passing
204/17:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
204/18:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (total_students/math_passing) * 100
percent_math_passing
204/19:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
205/1:
# Dependencies
import pandas as pd
import numpy as np
205/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
205/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
205/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
205/5:
# Count total schools
unique_schools = pycityschools_data_complete["School ID"].unique()
total_schools = len(unique_schools)
total_schools
205/6:
# Calculate the total number of students
unique_students = pycityschools_data_complete["student_name"].unique()
total_students = len(unique_students)
total_students
205/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
205/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
205/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
205/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
205/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
percent_reading_passing = (total_students/reading_passing)*100
percent_reading_passing
205/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
205/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
205/14:
# Give the displayed data cleaner formatting
summary_df["Total Schools"] = summary_df["Total Schools"].map("{:,.2f}".format)
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df
205/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
205/16:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,2f}".format)
summary_df
205/17:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:.,2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:.,2f}".format)
summary_df
205/18:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df
206/1:
# Count total schools
total_schools = len(pycityschools_data_complete["school_name"].unique())
total_schools
206/2:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
210/1:
# Dependencies
import pandas as pd
import numpy as np
210/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
210/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
210/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
210/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
210/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
210/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
210/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
210/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
210/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] =70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
212/1:
x_axis = np.arange(0, len(gyms))
tick_locations = []
for x in x_axis:
    tick_locations.append(x)
    
plt.title("NYC Gym Popularity")
plt.xlabel("Gym Name")
plt.ylabel("Number of Members")

plt.xlim(-0.75, len(gyms)-.25)
plt.ylim(0, max(members) + 5)

plt.bar(x_axis, members, facecolor="pink", alpha=0.5, align="center")
plt.xticks(tick_locations, gyms)
plt.show()
214/1:
# Import Dependencies
import numpy as np
import matplotlib.pyplot as plt
214/2:
# DATA SET 1
gyms = ["Crunch", "Planet Fitness", "NY Sports Club", "Rickie's Gym"]
members = [49, 92, 84, 53]
214/3:
x_axis = np.arange(0, len(gyms))
tick_locations = []
for x in x_axis:
    tick_locations.append(x)
    
plt.title("NYC Gym Popularity")
plt.xlabel("Gym Name")
plt.ylabel("Number of Members")

plt.xlim(-0.75, len(gyms)-.25)
plt.ylim(0, max(members) + 5)

plt.bar(x_axis, members, facecolor="pink", alpha=0.5, align="center")
plt.xticks(tick_locations, gyms)
plt.show()
214/4:
# DATA SET 2
x_lim = 2 * np.pi
x_axis = np.arange(0, x_lim, 0.1)
sin = np.sin(x_axis)
214/5:
# DATA SET 3
gyms = ["Crunch", "Planet Fitness", "NY Sports Club", "Rickie's Gym"]
members = [49, 92, 84, 53]
x_axis = np.arange(0, len(gyms))
colors = ["yellowgreen", "red", "lightcoral", "lightskyblue"]
explode = (0, 0.05, 0, 0)
214/6:
# DATA SET 4
x_axis = np.arange(0, 10, 0.1)
times = []
for x in x_axis:
    times.append(x * x + np.random.randint(0, np.ceil(max(x_axis))))
215/1:
# Import Dependencies
import numpy as np
import matplotlib.pyplot as plt
215/2:
# DATA SET 1
gyms = ["Crunch", "Planet Fitness", "NY Sports Club", "Rickie's Gym"]
members = [49, 92, 84, 53]
215/3:
x_axis = np.arange(0, len(gyms))
tick_locations = []
for x in x_axis:
    tick_locations.append(x)
    
plt.title("NYC Gym Popularity")
plt.xlabel("Gym Name")
plt.ylabel("Number of Members")

plt.xlim(-0.75, len(gyms)-.25)
plt.ylim(0, max(members) + 5)

plt.bar(x_axis, members, facecolor="pink", alpha=1, align="center")
plt.xticks(tick_locations, gyms)
plt.show()
215/4:
# DATA SET 2
x_lim = 2 * np.pi
x_axis = np.arange(0, x_lim, 0.1)
sin = np.sin(x_axis)
215/5:
# DATA SET 3
gyms = ["Crunch", "Planet Fitness", "NY Sports Club", "Rickie's Gym"]
members = [49, 92, 84, 53]
x_axis = np.arange(0, len(gyms))
colors = ["yellowgreen", "red", "lightcoral", "lightskyblue"]
explode = (0, 0.05, 0, 0)
215/6:
# DATA SET 4
x_axis = np.arange(0, 10, 0.1)
times = []
for x in x_axis:
    times.append(x * x + np.random.randint(0, np.ceil(max(x_axis))))
215/7:
plt.title("Sin from 0 to 2$\pi$")
plt.xlabel("Real Number frim 0 to 2$\pi$")
plt.ylabel("sin(x)")

plt.hlines(0, 0, x_lim, alpha=0.2)
plt.xlim(0, x_lim)
plt.ylim(-1.25, 1.25)

plt.plot(x_axis, sin, marker="o", color="red", linewidth=1)
plt.show()
216/1:
# Import Dependencies
import numpy as np
import matplotlib.pyplot as plt
216/2:
# DATA SET 1
gyms = ["Crunch", "Planet Fitness", "NY Sports Club", "Rickie's Gym"]
members = [49, 92, 84, 53]
216/3:
x_axis = np.arange(0, len(gyms))
tick_locations = []
for x in x_axis:
    tick_locations.append(x)
    
plt.title("NYC Gym Popularity")
plt.xlabel("Gym Name")
plt.ylabel("Number of Members")

plt.xlim(-0.75, len(gyms)-.25)
plt.ylim(0, max(members) + 5)

plt.bar(x_axis, members, facecolor="pink", alpha=1, align="center")
plt.xticks(tick_locations, gyms)
plt.show()
216/4:
# DATA SET 2
x_lim = 2 * np.pi
x_axis = np.arange(0, x_lim, 0.1)
sin = np.sin(x_axis)
216/5:
plt.title("Sin from 0 to 2$\pi$")
plt.xlabel("Real Number frim 0 to 2$\pi$")
plt.ylabel("sin(x)")

plt.hlines(0, 0, x_lim, alpha=0.2)
plt.xlim(0, x_lim)
plt.ylim(-1.25, 1.25)

plt.plot(x_axis, sin, marker="o", color="red", linewidth=1)
plt.show()
216/6:
# DATA SET 3
gyms = ["Crunch", "Planet Fitness", "NY Sports Club", "Rickie's Gym"]
members = [49, 92, 84, 53]
x_axis = np.arange(0, len(gyms))
colors = ["yellowgreen", "red", "lightcoral", "lightskyblue"]
explode = (0, 0.05, 0, 0)
216/7:
# DATA SET 4
x_axis = np.arange(0, 10, 0.1)
times = []
for x in x_axis:
    times.append(x * x + np.random.randint(0, np.ceil(max(x_axis))))
216/8:
plt.title("NYC Gym Popularity")
plt.pie(members, explode=explode, labels=gyms, colors=colors,
       autopct="%1.1f%%", shadow=True, startangle=90)
plt.axis("equal")
plt.show()
216/9:
plt.title("Running Time of FakeSort for Sample Input Sizes")
plt.xlabel("Length of Input Array")
plt.ylabel("Time to Sort (s)")

plt.scatter(x_axis, times, marker="o", color="blue")
plt.show()
218/1:
# Dependencies
import pandas as pd
import numpy as np
218/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
218/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
218/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
218/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
218/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
218/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
218/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
218/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
218/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] =70]["math_score"].count()
percent_math_passing = (math_passing/total_students) * 100
percent_math_passing
219/1:
# Dependencies
import pandas as pd
import numpy as np
219/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
219/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
219/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
219/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
219/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
219/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
219/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
219/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
219/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] =70]["math_score"].count()
percent_math_passing = (math_passing/total_students)*100
percent_math_passing
220/1:
# Dependencies
import pandas as pd
import numpy as np
220/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
220/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
220/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
220/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
220/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
220/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
220/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
220/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
220/10:
# Calculate the percentage of students with a passing math score (70 or greater)
math_passing = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["math_score"].count()
percent_math_passing = (math_passing/total_students)*100
percent_math_passing
220/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
percent_reading_passing = (total_students/reading_passing)*100
percent_reading_passing
220/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
220/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
220/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df
220/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
220/16:
schools_overview_df = pd.DataFrames({"School Name": school_name,
                                    "School Type": type,
                                    "Total Students": size,
                                    "Total School Budget": }
                                    
                                    "Total Unique Authors": [author_count],
                              "Earliest Year": earliest_year,
                              "Latest Year": latest_year,
                              "Total Reviews": total_reviews})
220/17:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
percent_reading_passing = (reading_passing/total_students)*100
percent_reading_passing
220/18:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
reading_passing
#percent_reading_passing = (reading_passing/total_students)*100
#percent_reading_passing
220/19:
# Calculate the percentage of students with a passing reading score (70 or greater)
reading_passing = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["reading_score"].count()
total_students
#reading_passing
#percent_reading_passing = (reading_passing/total_students)*100
#percent_reading_passing
220/20:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70].unique())
percent_math_passing = (unique_math_passing/total_students)*100
percent_math_passing
221/1:
# Dependencies
import pandas as pd
import numpy as np
221/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
221/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
221/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
221/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
221/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
221/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
221/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
221/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
221/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70].unique())
percent_math_passing = (unique_math_passing/total_students)*100
percent_math_passing
221/11:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = (unique_math_passing/total_students)*100
percent_math_passing
221/12:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = (unique_reading_passing/total_students)*100
percent_reading_passing
221/13:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100), 2)
percent_reading_passing
221/14:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = (unique_reading_passing/total_students)*100
percent_reading_passing
221/15:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
221/16:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
221/17:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df
221/18:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df["% of Students with Passing Math Score"] = summary_df.round(2)
221/19:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2df}".format)
222/1:
# Dependencies
import pandas as pd
import numpy as np
222/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
222/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
222/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
222/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
222/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
222/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
222/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
222/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
222/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = (unique_math_passing/total_students)*100
percent_math_passing
222/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = (unique_reading_passing/total_students)*100
percent_reading_passing
222/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
222/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
222/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2df}".format)
225/1:
# Dependencies
import pandas as pd
import numpy as np
225/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
225/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
225/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
225/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
225/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
225/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
225/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
225/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
225/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = (unique_math_passing/total_students)*100
percent_math_passing
225/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = (unique_reading_passing/total_students)*100
percent_reading_passing
225/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
225/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
225/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
# summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2df}".format)
225/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
225/16:
schools_overview_df = pd.DataFrames({"School Name": school_name,
                                    "School Type": type,
                                    "Total Students": size,
                                    "Total School Budget": }
                                    
                                    "Total Unique Authors": [author_count],
                              "Earliest Year": earliest_year,
                              "Latest Year": latest_year,
                              "Total Reviews": total_reviews})
225/17:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round[(unique_reading_passing/total_students)*100, 2]
percent_reading_passing
225/18:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = [(unique_reading_passing/total_students)*100].round(2)
percent_reading_passing
225/19:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = ((unique_reading_passing/total_students)*100).round(2)
percent_reading_passing
225/20:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
225/21:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
225/22:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df
226/1:
# Dependencies
import pandas as pd
import numpy as np
226/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
226/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
226/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
226/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
226/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
226/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
226/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
226/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
226/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
226/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
226/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
226/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
226/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df
226/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
226/16:
schools_overview_df = pd.DataFrames({"School Name": school_name,
                                    "School Type": type,
                                    "Total Students": size,
                                    "Total School Budget": }
                                    
                                    "Total Unique Authors": [author_count],
                              "Earliest Year": earliest_year,
                              "Latest Year": latest_year,
                              "Total Reviews": total_reviews})
226/17:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df.object()
226/18:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
227/1:
# Import Dependencies
import numpy as np
import matplotlib.pyplot as plt
227/2:
# DATA SET 1
gyms = ["Crunch", "Planet Fitness", "NY Sports Club", "Rickie's Gym"]
members = [49, 92, 84, 53]
227/3:
x_axis = np.arange(0, len(gyms))
tick_locations = []
for x in x_axis:
    tick_locations.append(x)
    
plt.title("NYC Gym Popularity")
plt.xlabel("Gym Name")
plt.ylabel("Number of Members")

plt.xlim(-0.75, len(gyms)-.25)
plt.ylim(0, max(members) + 5)

plt.bar(x_axis, members, facecolor="pink", alpha=1, align="center")
plt.xticks(tick_locations, gyms)
plt.show()
227/4:
# DATA SET 2
x_lim = 2 * np.pi
x_axis = np.arange(0, x_lim, 0.1)
sin = np.sin(x_axis)
227/5:
plt.title("Sin from 0 to 2$\pi$")
plt.xlabel("Real Number frim 0 to 2$\pi$")
plt.ylabel("sin(x)")

plt.hlines(0, 0, x_lim, alpha=0.2)
plt.xlim(0, x_lim)
plt.ylim(-1.25, 1.25)

plt.plot(x_axis, sin, marker="o", color="red", linewidth=1)
plt.show()
227/6:
# DATA SET 3
gyms = ["Crunch", "Planet Fitness", "NY Sports Club", "Rickie's Gym"]
members = [49, 92, 84, 53]
x_axis = np.arange(0, len(gyms))
colors = ["yellowgreen", "red", "lightcoral", "lightskyblue"]
explode = (0, 0.05, 0, 0)
227/7:
plt.title("NYC Gym Popularity")
plt.pie(members, explode=explode, labels=gyms, colors=colors,
       autopct="%1.1f%%", shadow=True, startangle=90)
plt.axis("equal")
plt.show()
227/8:
# DATA SET 4
x_axis = np.arange(0, 10, 0.1)
times = []
for x in x_axis:
    times.append(x * x + np.random.randint(0, np.ceil(max(x_axis))))
227/9:
# Import Dependencies
import numpy as np
import matplotlib.pyplot as plt
227/10:
# DATA SET 1
gyms = ["Crunch", "Planet Fitness", "NY Sports Club", "Rickie's Gym"]
members = [49, 92, 84, 53]
227/11:
x_axis = np.arange(0, len(gyms))
tick_locations = []
for x in x_axis:
    tick_locations.append(x)
    
plt.title("NYC Gym Popularity")
plt.xlabel("Gym Name")
plt.ylabel("Number of Members")

plt.xlim(-0.75, len(gyms)-.25)
plt.ylim(0, max(members) + 5)

plt.bar(x_axis, members, facecolor="pink", alpha=1, align="center")
plt.xticks(tick_locations, gyms)
plt.show()
227/12:
# DATA SET 2
x_lim = 2 * np.pi
x_axis = np.arange(0, x_lim, 0.1)
sin = np.sin(x_axis)
227/13:
plt.title("Sin from 0 to 2$\pi$")
plt.xlabel("Real Number frim 0 to 2$\pi$")
plt.ylabel("sin(x)")

plt.hlines(0, 0, x_lim, alpha=0.2)
plt.xlim(0, x_lim)
plt.ylim(-1.25, 1.25)

plt.plot(x_axis, sin, marker="o", color="red", linewidth=1)
plt.show()
227/14:
# DATA SET 3
gyms = ["Crunch", "Planet Fitness", "NY Sports Club", "Rickie's Gym"]
members = [49, 92, 84, 53]
x_axis = np.arange(0, len(gyms))
colors = ["yellowgreen", "red", "lightcoral", "lightskyblue"]
explode = (0, 0.05, 0, 0)
227/15:
plt.title("NYC Gym Popularity")
plt.pie(members, explode=explode, labels=gyms, colors=colors,
       autopct="%1.1f%%", shadow=True, startangle=90)
plt.axis("equal")
plt.show()
227/16:
# DATA SET 4
x_axis = np.arange(0, 10, 0.1)
times = []
for x in x_axis:
    times.append(x * x + np.random.randint(0, np.ceil(max(x_axis))))
227/17:
# Import Dependencies
import numpy as np
import matplotlib.pyplot as plt
227/18:
# DATA SET 1
gyms = ["Crunch", "Planet Fitness", "NY Sports Club", "Rickie's Gym"]
members = [49, 92, 84, 53]
227/19:
x_axis = np.arange(0, len(gyms))
tick_locations = []
for x in x_axis:
    tick_locations.append(x)
    
plt.title("NYC Gym Popularity")
plt.xlabel("Gym Name")
plt.ylabel("Number of Members")

plt.xlim(-0.75, len(gyms)-.25)
plt.ylim(0, max(members) + 5)

plt.bar(x_axis, members, facecolor="pink", alpha=1, align="center")
plt.xticks(tick_locations, gyms)
plt.show()
227/20:
# DATA SET 2
x_lim = 2 * np.pi
x_axis = np.arange(0, x_lim, 0.1)
sin = np.sin(x_axis)
227/21:
plt.title("Sin from 0 to 2$\pi$")
plt.xlabel("Real Number frim 0 to 2$\pi$")
plt.ylabel("sin(x)")

plt.hlines(0, 0, x_lim, alpha=0.2)
plt.xlim(0, x_lim)
plt.ylim(-1.25, 1.25)

plt.plot(x_axis, sin, marker="o", color="red", linewidth=1)
plt.show()
227/22:
# DATA SET 3
gyms = ["Crunch", "Planet Fitness", "NY Sports Club", "Rickie's Gym"]
members = [49, 92, 84, 53]
x_axis = np.arange(0, len(gyms))
colors = ["yellowgreen", "red", "lightcoral", "lightskyblue"]
explode = (0, 0.05, 0, 0)
227/23:
plt.title("NYC Gym Popularity")
plt.pie(members, explode=explode, labels=gyms, colors=colors,
       autopct="%1.1f%%", shadow=True, startangle=90)
plt.axis("equal")
plt.show()
227/24:
# DATA SET 4
x_axis = np.arange(0, 10, 0.1)
times = []
for x in x_axis:
    times.append(x * x + np.random.randint(0, np.ceil(max(x_axis))))
227/25:
plt.title("Running Time of FakeSort for Sample Input Sizes")
plt.xlabel("Length of Input Array")
plt.ylabel("Time to Sort (s)")

plt.scatter(x_axis, times, marker="o", color="blue")
plt.show()
231/1:
# Dependencies
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
231/2:
# Read CSV
GameOfThrones_data = pd.read_csv("Resources/got.csv")
GameOfThrones_data
231/3: # Get attacker and defender data
231/4: # Get total battle data
231/5: # Configure plot and ticks
231/6: # Set textual properties
231/7: # Show plot
240/1:
# Dependencies
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
240/2:
# Read CSV
GameOfThrones_data = pd.read_csv("Resources/got.csv")
GameOfThrones_data
240/3:
# Get attacker and defender data
attacker_king_data = GameOfThrones_data["attacker_king"].value_counts()
defender_king_data = GameOfThrones_data["defende_king"].value_counts()
240/4:
# Get attacker and defender data
attacker_king_data = GameOfThrones_data["attacker_king"].value_counts()
defender_king_data = GameOfThrones_data["defender_king"].value_counts()
240/5:
# Get total battle data
total_battle_data = attacker_kind_data.add(defender_king_data, fill_value=0)
240/6:
# Get total battle data
total_battle_data = attacker_king_data.add(defender_king_data, fill_value=0)
240/7:
# Configure plot and ticks
total_battle_data.plot(kind="bar", facecolor="blue")
240/8:
# Configure plot and ticks
total_battle_data.plot(kind="bar", facecolor="blue", alpha=0.5)
241/1:
# Dependencies
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
241/2:
# Read CSV
GameOfThrones_data = pd.read_csv("Resources/got.csv")
GameOfThrones_data
241/3:
# Get attacker and defender data
attacker_king_data = GameOfThrones_data["attacker_king"].value_counts()
defender_king_data = GameOfThrones_data["defender_king"].value_counts()
241/4:
# Get total battle data
total_battle_data = attacker_king_data.add(defender_king_data, fill_value=0)
241/5:
# Configure plot and ticks
total_battle_data.plot(kind="bar", facecolor="blue", alpha=0.5)
241/6:
# Set textual properties
plt.title("Total Battle Data")
plt.ylable("Number of Battles")
plt.xlable("Kings")
241/7:
# Set textual properties
plt.title("Total Battle Data")
plt.ylabel("Number of Battles")
plt.xlabel("Kings")
241/8:
# Show plot
plt.show()
plt.tight_layout()
242/1: %matplotlib notebook
242/2:
# Dependencies
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
242/3:
# Read CSV
got_data = pd.read_csv("Resources/got.csv")
got_data
242/4:
# Get attacker and defender king data
attacker_data = got_data["attacker_king"].value_counts()
defender_data = got_data["defender_king"].value_counts()
242/5:
# Get total battle data
battle_data = attacker_data.add(defender_data, fill_value=0)
242/6:
# Configure plot and ticks
battle_data.plot(kind="bar", facecolor="red")
242/7:
# Set textual properties
plt.title("The Bloodthirst of Kings")
plt.ylabel("Number of Battles Participated In")
plt.xlabel("King")
242/8:
# Show plot
plt.show()
242/9:
# Resize plot to display labels
plt.tight_layout()
243/1: %matplotlib notebook
243/2:
# Dependencies
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
243/3:
# Read CSV
GameOfThrones_data = pd.read_csv("Resources/got.csv")
GameOfThrones_data
243/4:
# Get attacker and defender data
attacker_king_data = GameOfThrones_data["attacker_king"].value_counts()
defender_king_data = GameOfThrones_data["defender_king"].value_counts()
243/5:
# Get total battle data
total_battle_data = attacker_king_data.add(defender_king_data, fill_value=0)
243/6:
# Configure plot and ticks
total_battle_data.plot(kind="bar", facecolor="blue", alpha=0.5)
243/7:
# Set textual properties
plt.title("Total Battle Data")
plt.ylabel("Number of Battles")
plt.xlabel("Kings")
243/8:
# Show plot
plt.show()
plt.tight_layout()
246/1: %matplotlib notebook
246/2:
# Import Dependencies
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
246/3:
# Read CSV
trip_file = "../Resources/trip.csv"
bike_trips_df = pd.read_csv(trip_file, low_memory=False)

bike_trips_df.head()
247/1: %matplotlib notebook
247/2:
# Import Dependencies
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
247/3:
# Read CSV
trip_file = "../Resources/trip.csv"
bike_trips_df = pd.read_csv(trip_file, low_memory=False)

bike_trips_df.head()
247/4:
# Group by gender
gender_group = bike_trips_df.groupby('gender')

# number of trips per gender
gender_trips = gender_group['tripduration'].count()

# remove stoptime row that is within the group
gender_trips = gender_trips.drop(gender_trips.index[3])

# Chart the data
gender_chart = gender_trips.plot(kind="bar", title="Bike Trips by Gender")
gender_chart.set_xlabel("Gender")
gender_chart.set_ylabel("Number of Trips Taken")

plt.show()
plt.tight_layout()
248/1: %matplotlib notebook
248/2:
# Import Dependencies
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
248/3:
# Read CSV
trip_file = "../Resources/trip.csv"
bike_trips_df = pd.read_csv(trip_file, low_memory=False)

bike_trips_df.head()
248/4:
# Group by gender
gender_group = bike_trips_df.groupby('gender')

# number of trips per gender
gender_trips = gender_group['tripduration'].count()

# remove stoptime row that is within the group
gender_trips = gender_trips.drop(gender_trips.index[3])

# Chart the data
gender_chart = gender_trips.plot(kind="bar", title="Bike Trips by Gender")
gender_chart.set_xlabel("Gender")
gender_chart.set_ylabel("Number of Trips Taken")

plt.show()
plt.tight_layout()
248/5:
bike_groups = bike_trips_df.groupby(['bikeid','gender'])

sum_biker_groups = bike_groups.sum()
sum_biker_groups.head(15)
248/6:
bike_id = "SEA00001"

just_one_bike = sum_biker_group.loc[bike_id]

biker_pie = just_one_bike.plot(kind="pie", y='tripduration', title=("Trips of " + bike_id))
biker_pie.set_ylabel("Trip Duration")

plt.show()
plt.axis("equal")
249/1: %matplotlib notebook
249/2:
# Import Dependencies
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
249/3:
# Read CSV
trip_file = "../Resources/trip.csv"
bike_trips_df = pd.read_csv(trip_file, low_memory=False)

bike_trips_df.head()
249/4:
# Group by gender
gender_group = bike_trips_df.groupby('gender')

# number of trips per gender
gender_trips = gender_group['tripduration'].count()

# remove stoptime row that is within the group
gender_trips = gender_trips.drop(gender_trips.index[3])

# Chart the data
gender_chart = gender_trips.plot(kind="bar", title="Bike Trips by Gender")
gender_chart.set_xlabel("Gender")
gender_chart.set_ylabel("Number of Trips Taken")

plt.show()
plt.tight_layout()
249/5:
bike_groups = bike_trips_df.groupby(['bikeid','gender'])

sum_biker_groups = bike_groups.sum()
sum_biker_groups.head(15)
249/6:
bike_id = "SEA00001"

just_one_bike = sum_biker_group.loc[bike_id]

biker_pie = just_one_bike.plot(kind="pie", y='tripduration', title=("Trips of " + bike_id))
biker_pie.set_ylabel("Trip Duration")

plt.show()
plt.axis("equal")
250/1: %matplotlib notebook
250/2:
# Import Dependencies
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
250/3:
# Read CSV
trip_file = "../Resources/trip.csv"
bike_trips_df = pd.read_csv(trip_file, low_memory=False)

bike_trips_df.head()
250/4:
# Group by gender
gender_group = bike_trips_df.groupby('gender')

# number of trips per gender
gender_trips = gender_group['tripduration'].count()

# remove stoptime row that is within the group
gender_trips = gender_trips.drop(gender_trips.index[3])

# Chart the data
gender_chart = gender_trips.plot(kind="bar", title="Bike Trips by Gender")
gender_chart.set_xlabel("Gender")
gender_chart.set_ylabel("Number of Trips Taken")

plt.show()
plt.tight_layout()
250/5:
bike_groups = bike_trips_df.groupby(['bikeid','gender'])

sum_biker_groups = bike_groups.sum()
sum_biker_groups.head(15)
250/6:
bike_id = "SEA00001"

just_one_bike = sum_biker_groups.loc[bike_id]

biker_pie = just_one_bike.plot(kind="pie", y='tripduration', title=("Trips of " + bike_id))
biker_pie.set_ylabel("Trip Duration")

plt.show()
plt.axis("equal")
251/1:
mpg_data = pd.read_csv("../Resources/mpg.csv")
mpg_data.head()
253/1: %matplotlib notebook
253/2:
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
253/3:
mpg_data = pd.read_csv("../Resources/mpg.csv")
mpg_data.head()
253/4:
mpg_data = mpg_data.loc[mpg_data['horsepower']!= "?"]
mpg_data.head()
253/5:
# Set the index
mpg_data = mpg_data.set_index('car name')

# Remove the origin column
del car_data['origin']

mpg_data.head()
253/6:
# Set the index
mpg_data = mpg_data.set_index('car name')

# Remove the origin column
del mpg_data['origin']

mpg_data.head()
254/1: %matplotlib notebook
254/2:
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
254/3:
mpg_data = pd.read_csv("../Resources/mpg.csv")
mpg_data.head()
254/4:
mpg_data = mpg_data.loc[mpg_data['horsepower']!= "?"]
mpg_data.head()
254/5:
# Set the index
mpg_data = mpg_data.set_index('car name')

# Remove the origin column
del mpg_data['origin']

mpg_data.head()
254/6:
mpg_data.plot(kind="scatter", x="horsepower", y="mpg", grid=True, figsize=(8,8), title="MPG vs. Horsepower")
plt.show()
254/7:
mpg_data.plot(kind="scatter", x="horsepower", y="mpg", grid=True, figsize=(8,8), title="MPG vs. Horsepower")
plt.show()
plt.tight_layout()
255/1: %matplotlib notebook
255/2:
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
255/3:
mpg_data = pd.read_csv("../Resources/mpg.csv")
mpg_data.head()
255/4:
mpg_data = mpg_data.loc[mpg_data['horsepower']!= "?"]
mpg_data.head()
255/5:
# Set the index
mpg_data = mpg_data.set_index('car name')

# Remove the origin column
del mpg_data['origin']

mpg_data.head()
255/6: mpg_data['horsepower'] = pd.to_numeric(mpg_data['horsepower'])
255/7:
mpg_data.plot(kind="scatter", x="horsepower", y="mpg", grid=True, figsize=(8,8), title="MPG vs. Horsepower")
plt.show()
plt.tight_layout()
258/1:
# Import the necessary modules
%matplotlib notebook
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
258/2:
# Bring each CSV into a separate data frame
wrestling_2013 = "../Resources/WWE-Data-2013.csv"
wrestling_2014 = "../Resources/WWE-Data-2014.csv"
wrestling_2015 = "../Resources/WWE-Data-2015.csv"
wrestling_2016 = "../Resources/WWE-Data-2015.csv"

wrestlers_2013_df = pd.read_csv(wrestling_2013)
wrestlers_2014_df = pd.read_csv(wrestling_2014)
wrestlers_2015_df = pd.read_csv(wrestling_2015)
wrestlers_2016_df = pd.read_csv(wrestling_2016)
258/3:
# Merge the first two datasets (2013 and 2014) on "Wrestler" so that no data is lost (should be 182 rows)
merged_wrestlers_df = pd.merge(wrestlers_2013_df, wrestlers_2014_df, how='outer', on='Wrestler')
merged_wrestlers_df.head()
258/4:
# Rename our _x columns to "2013 Wins", "2013 Losses", and "2013 Draws"

# Rename our _y columns to "2014 Wins", "2014 Losses", and "2014 Draws"
258/5: # Merge our newly combined dataframe with the 2015 dataframe
258/6: # Rename "wins", "losses", and "draws" to "2015 Wins", "2015 Losses", and "2015 Draws"
258/7: # Merge our newly combined dataframe with the 2016 dataframe
258/8: # Rename "wins", "losses", and "draws" to "2016 Wins", "2016 Losses", and "2016 Draws"
258/9:
# Rename our _x columns to "2013 Wins", "2013 Losses", and "2013 Draws"
merged_wrestlers_df = merged_wrestlers_df.rename(columns={"Wins_x":"2013 Wins",
                                                          "Losses_x": "2013 Losses",
                                                          "Draws_x": "2013 Draws"})

# Rename our _y columns to "2014 Wins", "2014 Losses", and "2014 Draws"
merged_wrestlers_df = merged_wrestlers_df.rename(columns={"Wins_y":"2014 Wins",
                                                          "Losses_y": "2014 Losses",
                                                          "Draws_y": "2014 Draws"})
merged_wrestlers_df.head()
258/10:
# Merge our newly combined dataframe with the 2015 dataframe
merged_wrestlers_df = pd.merge(merged_wrestlers_df, wrestlers_2015_df, how="outer", on="Wrestler")
merged_wrestlers_df
258/11:
# Rename "wins", "losses", and "draws" to "2015 Wins", "2015 Losses", and "2015 Draws"
merged_wrestlers_df = merged_wrestlers_df.rename(columns={"Wins":"2015 Wins","Losses":"2015 Losses","Draws":"2015 Draws"})

merged_wrestlers_df.head()
258/12:
# Merge our newly combined dataframe with the 2016 dataframe
merged_wrestlers_df = pd.merge(merged_wrestlers_df, wrestlers_2016_df, how="outer", on="Wrestler")
merged_wrestlers_df
258/13:
# Rename "wins", "losses", and "draws" to "2016 Wins", "2016 Losses", and "2016 Draws"
merged_wrestlers_df = merged_wrestlers_df.rename(columns={"Wins":"2016 Wins","Losses":"2016 Losses","Draws":"2016 Draws"})

merged_wrestlers_df.head(10)
259/1:
# Replace all NaN values with 0
combined_wrestlers_df = combined_wrestlers_df.fillna(0)

# Create a new column called "Total Wins" and add up each wrestler's wins per year to fill in the values
combined_wrestlers_df["Total Wins"] = combined_wrestlers_df["2013 Wins"] + combined_wrestlers_df["2014 Wins"] + combined_wrestlers_df["2015 Wins"] + combined_wrestlers_df["2016 Wins"]

# Create a new column called "Total Losses" and add up each wrestler's losses per year to fill in the values
combined_wrestlers_df["Total Losses"] = combined_wrestlers_df["2013 Losses"] + combined_wrestlers_df["2014 Losses"] + combined_wrestlers_df["2015 Losses"] + combined_wrestlers_df["2016 Losses"]


# Create a new column called "Total Draws" and add up each wrestler's draws per year to fill in the values
combined_wrestlers_df["Total Draws"] = combined_wrestlers_df["2013 Draws"] + combined_wrestlers_df["2014 Draws"] + combined_wrestlers_df["2015 Draws"] + combined_wrestlers_df["2016 Draws"]

# Create a new column called "Total Matches" and add up the total wins, losses, and draws for each wrestler to fill in the values
combined_wrestlers_df["Total Matches"] = combined_wrestlers_df["Total Wins"] + combined_wrestlers_df["Total Losses"] + combined_wrestlers_df["Total Draws"]
combined_wrestlers_df.head()
261/1:
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
261/2:
# Take in all of our wrestling data and read it into pandas
wrestling_2013 = "../Resources/WWE-Data-2013.csv"
wrestling_2014 = "../Resources/WWE-Data-2014.csv"
wrestling_2015 = "../Resources/WWE-Data-2015.csv"
wrestling_2016 = "../Resources/WWE-Data-2016.csv"

wrestlers_2013_df = pd.read_csv(wrestling_2013)
wrestlers_2014_df = pd.read_csv(wrestling_2014)
wrestlers_2015_df = pd.read_csv(wrestling_2015)
wrestlers_2016_df = pd.read_csv(wrestling_2016)
261/3:
# Merge the first two datasets on "Wrestler" so that no data is lost (should be 182 rows)
combined_wrestlers_df = pd.merge(wrestlers_2013_df, wrestlers_2014_df,
                                 how='outer', on='Wrestler')
combined_wrestlers_df.head()
261/4:
# Rename our _x columns to "2013 Wins", "2013 Losses", and "2013 Draws"
combined_wrestlers_df = combined_wrestlers_df.rename(columns={"Wins_x":"2013 Wins",
                                                              "Losses_x":"2013 Losses",
                                                              "Draws_x":"2013 Draws"})

# Rename our _y columns to "2014 Wins", "2014 Losses", and "2014 Draws"
combined_wrestlers_df = combined_wrestlers_df.rename(columns={"Wins_y":"2014 Wins",
                                                              "Losses_y":"2014 Losses",
                                                              "Draws_y":"2014 Draws"})

combined_wrestlers_df.head()
261/5:
# Merge our newly combined dataframe with the 2015 dataframe
combined_wrestlers_df = pd.merge(combined_wrestlers_df, wrestlers_2015_df, how="outer", on="Wrestler")
combined_wrestlers_df
261/6:
# Rename "wins", "losses", and "draws" to "2015 Wins", "2015 Losses", and "2015 Draws"
combined_wrestlers_df = combined_wrestlers_df.rename(columns={"Wins":"2015 Wins","Losses":"2015 Losses","Draws":"2015 Draws"})

combined_wrestlers_df.head()
261/7:
# Merge our newly combined dataframe with the 2016 dataframe
combined_wrestlers_df = pd.merge(combined_wrestlers_df, wrestlers_2016_df, how="outer", on="Wrestler")
combined_wrestlers_df
261/8:
# Rename "wins", "losses", and "draws" to "2016 Wins", "2016 Losses", and "2016 Draws"
combined_wrestlers_df = combined_wrestlers_df.rename(columns={"Wins":"2016 Wins","Losses":"2016 Losses","Draws":"2016 Draws"})

combined_wrestlers_df.head(10)
261/9:
# Replace all NaN values with 0
combined_wrestlers_df = combined_wrestlers_df.fillna(0)

# Create a new column called "Total Wins" and add up each wrestler's wins per year to fill in the values
combined_wrestlers_df["Total Wins"] = combined_wrestlers_df["2013 Wins"] + combined_wrestlers_df["2014 Wins"] + combined_wrestlers_df["2015 Wins"] + combined_wrestlers_df["2016 Wins"]

# Create a new column called "Total Losses" and add up each wrestler's losses per year to fill in the values
combined_wrestlers_df["Total Losses"] = combined_wrestlers_df["2013 Losses"] + combined_wrestlers_df["2014 Losses"] + combined_wrestlers_df["2015 Losses"] + combined_wrestlers_df["2016 Losses"]


# Create a new column called "Total Draws" and add up each wrestler's draws per year to fill in the values
combined_wrestlers_df["Total Draws"] = combined_wrestlers_df["2013 Draws"] + combined_wrestlers_df["2014 Draws"] + combined_wrestlers_df["2015 Draws"] + combined_wrestlers_df["2016 Draws"]

# Create a new column called "Total Matches" and add up the total wins, losses, and draws for each wrestler to fill in the values
combined_wrestlers_df["Total Matches"] = combined_wrestlers_df["Total Wins"] + combined_wrestlers_df["Total Losses"] + combined_wrestlers_df["Total Draws"]
combined_wrestlers_df.head()
261/10:
# Create a new dataframe for those wrestlers who have wrestled at least 100 matches,
# have at least one win in 2013,
# and have at least one win in 2016

# Set the index of this new dataframe to be the wrestlers names
261/11:
# Create a new dataframe for those wrestlers who have wrestled at least 100 matches,
# have at least one win in 2013,
# and have at least one win in 2016
wrestled_100times = combined_wrestlers_df.loc[(combined_wrestlers_df["Total Matches"] >=100) & 
                                              (combined_wrestlers_df["2013 Wins"] >0) &
                                             (combined_wrestlers_df["2016 Wins"] >0)]

# Set the index of this new dataframe to be the wrestlers names
wrestled_100times = wrestled_100times.set_index("Wrestler")
wrestled_100time.head()
262/1:
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
262/2:
# Take in all of our wrestling data and read it into pandas
wrestling_2013 = "../Resources/WWE-Data-2013.csv"
wrestling_2014 = "../Resources/WWE-Data-2014.csv"
wrestling_2015 = "../Resources/WWE-Data-2015.csv"
wrestling_2016 = "../Resources/WWE-Data-2016.csv"

wrestlers_2013_df = pd.read_csv(wrestling_2013)
wrestlers_2014_df = pd.read_csv(wrestling_2014)
wrestlers_2015_df = pd.read_csv(wrestling_2015)
wrestlers_2016_df = pd.read_csv(wrestling_2016)
262/3:
# Merge the first two datasets on "Wrestler" so that no data is lost (should be 182 rows)
combined_wrestlers_df = pd.merge(wrestlers_2013_df, wrestlers_2014_df,
                                 how='outer', on='Wrestler')
combined_wrestlers_df.head()
262/4:
# Rename our _x columns to "2013 Wins", "2013 Losses", and "2013 Draws"
combined_wrestlers_df = combined_wrestlers_df.rename(columns={"Wins_x":"2013 Wins",
                                                              "Losses_x":"2013 Losses",
                                                              "Draws_x":"2013 Draws"})

# Rename our _y columns to "2014 Wins", "2014 Losses", and "2014 Draws"
combined_wrestlers_df = combined_wrestlers_df.rename(columns={"Wins_y":"2014 Wins",
                                                              "Losses_y":"2014 Losses",
                                                              "Draws_y":"2014 Draws"})

combined_wrestlers_df.head()
262/5:
# Merge our newly combined dataframe with the 2015 dataframe
combined_wrestlers_df = pd.merge(combined_wrestlers_df, wrestlers_2015_df, how="outer", on="Wrestler")
combined_wrestlers_df
262/6:
# Rename "wins", "losses", and "draws" to "2015 Wins", "2015 Losses", and "2015 Draws"
combined_wrestlers_df = combined_wrestlers_df.rename(columns={"Wins":"2015 Wins","Losses":"2015 Losses","Draws":"2015 Draws"})

combined_wrestlers_df.head()
262/7:
# Merge our newly combined dataframe with the 2016 dataframe
combined_wrestlers_df = pd.merge(combined_wrestlers_df, wrestlers_2016_df, how="outer", on="Wrestler")
combined_wrestlers_df
262/8:
# Rename "wins", "losses", and "draws" to "2016 Wins", "2016 Losses", and "2016 Draws"
combined_wrestlers_df = combined_wrestlers_df.rename(columns={"Wins":"2016 Wins","Losses":"2016 Losses","Draws":"2016 Draws"})

combined_wrestlers_df.head(10)
262/9:
# Replace all NaN values with 0
combined_wrestlers_df = combined_wrestlers_df.fillna(0)

# Create a new column called "Total Wins" and add up each wrestler's wins per year to fill in the values
combined_wrestlers_df["Total Wins"] = combined_wrestlers_df["2013 Wins"] + combined_wrestlers_df["2014 Wins"] + combined_wrestlers_df["2015 Wins"] + combined_wrestlers_df["2016 Wins"]

# Create a new column called "Total Losses" and add up each wrestler's losses per year to fill in the values
combined_wrestlers_df["Total Losses"] = combined_wrestlers_df["2013 Losses"] + combined_wrestlers_df["2014 Losses"] + combined_wrestlers_df["2015 Losses"] + combined_wrestlers_df["2016 Losses"]


# Create a new column called "Total Draws" and add up each wrestler's draws per year to fill in the values
combined_wrestlers_df["Total Draws"] = combined_wrestlers_df["2013 Draws"] + combined_wrestlers_df["2014 Draws"] + combined_wrestlers_df["2015 Draws"] + combined_wrestlers_df["2016 Draws"]

# Create a new column called "Total Matches" and add up the total wins, losses, and draws for each wrestler to fill in the values
combined_wrestlers_df["Total Matches"] = combined_wrestlers_df["Total Wins"] + combined_wrestlers_df["Total Losses"] + combined_wrestlers_df["Total Draws"]
combined_wrestlers_df.head()
262/10:
# Create a new dataframe for those wrestlers who have wrestled at least 100 matches,
# have at least one win in 2013,
# and have at least one win in 2016
wrestled_100times = combined_wrestlers_df.loc[(combined_wrestlers_df["Total Matches"] >=100) & 
                                              (combined_wrestlers_df["2013 Wins"] >0) &
                                             (combined_wrestlers_df["2016 Wins"] >0)]

# Set the index of this new dataframe to be the wrestlers names
wrestled_100times = wrestled_100times.set_index("Wrestler")
wrestled_100times.head()
262/11:
# Create a new dataframe for those wrestlers who have wrestled at least 100 matches,
# have at least one win in 2013,
# and have at least one win in 2016
wrestled_100times = combined_wrestlers_df.loc[
    (combined_wrestlers_df["Total Matches"] >=100) &
    (combined_wrestlers_df["2013 Wins"] >0) &
    (combined_wrestlers_df["2016 Wins"] >0)
]

# Set the index of this new dataframe to be the wrestlers names
wrestled_100times = wrestled_100times.set_index("Wrestler")
wrestled_100times.head()
265/1: %matplotlib notebook
265/2:
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
265/3:
# Take in all of our wrestling data and read it into pandas
wrestling_2013 = "../Resources/WWE-Data-2013.csv"
wrestling_2014 = "../Resources/WWE-Data-2014.csv"
wrestling_2015 = "../Resources/WWE-Data-2015.csv"
wrestling_2016 = "../Resources/WWE-Data-2016.csv"

wrestlers_2013_df = pd.read_csv(wrestling_2013)
wrestlers_2014_df = pd.read_csv(wrestling_2014)
wrestlers_2015_df = pd.read_csv(wrestling_2015)
wrestlers_2016_df = pd.read_csv(wrestling_2016)
265/4:
# Merge the first two datasets on "Wrestler" so that no data is lost (should be 182 rows)
combined_wrestlers_df = pd.merge(wrestlers_2013_df, wrestlers_2014_df, how='outer', on='Wrestler')
combined_wrestlers_df
265/5:
# Rename our _x columns to "2013 Wins", "2013 Losses", and "2013 Draws"
combined_wrestlers_df = combined_wrestlers_df.rename(columns={"Wins_x":"2013 Wins", "Losses_x":"2013 Losses", "Draws_x":"2013 Draws"})

# Rename our _y columns to "2014 Wins", "2014 Losses", and "2014 Draws"
combined_wrestlers_df = combined_wrestlers_df.rename(columns={"Wins_y":"2014 Wins","Losses_y":"2014 Losses","Draws_y":"2014 Draws"})

combined_wrestlers_df.head()
265/6:
# Merge our newly combined dataframe with the 2015 dataframe
combined_wrestlers_df = pd.merge(combined_wrestlers_df, wrestlers_2015_df, how="outer", on="Wrestler")
combined_wrestlers_df
265/7:
# Rename "wins", "losses", and "draws" to "2015 Wins", "2015 Losses", and "2015 Draws"
combined_wrestlers_df = combined_wrestlers_df.rename(columns={"Wins":"2015 Wins","Losses":"2015 Losses","Draws":"2015 Draws"})

combined_wrestlers_df.head()
265/8:
# Merge our newly combined dataframe with the 2016 dataframe
combined_wrestlers_df = pd.merge(combined_wrestlers_df, wrestlers_2016_df, how="outer", on="Wrestler")
combined_wrestlers_df
265/9:
# Rename "wins", "losses", and "draws" to "2016 Wins", "2016 Losses", and "2016 Draws"
combined_wrestlers_df = combined_wrestlers_df.rename(columns={"Wins":"2016 Wins","Losses":"2016 Losses","Draws":"2016 Draws"})

combined_wrestlers_df.head()
265/10:
# Replace all NaN values with 0 
combined_wrestlers_df = combined_wrestlers_df.fillna(0)

# Create a new column called "Total Wins" and add up each wrestler's wins per year to fill in the values
combined_wrestlers_df["Total Wins"] = combined_wrestlers_df["2013 Wins"] + combined_wrestlers_df["2014 Wins"] + combined_wrestlers_df["2015 Wins"] + combined_wrestlers_df["2016 Wins"]

# Create a new column called "Total Losses" and add up each wrestler's losses per year to fill in the values
combined_wrestlers_df["Total Losses"] = combined_wrestlers_df["2013 Losses"] + combined_wrestlers_df["2014 Losses"] + combined_wrestlers_df["2015 Losses"] + combined_wrestlers_df["2016 Losses"]

# Create a new column called "Total Draws" and add up each wrestler's draws per year to fill in the values
combined_wrestlers_df["Total Draws"] = combined_wrestlers_df["2013 Draws"] + combined_wrestlers_df["2014 Draws"] + combined_wrestlers_df["2015 Draws"] + combined_wrestlers_df["2016 Draws"]

# Create a new column called "Total Matches" and add up the total wins, losses, and draws for each wrestler to fill in the values
combined_wrestlers_df["Total Matches"] = combined_wrestlers_df["Total Wins"] + combined_wrestlers_df["Total Losses"] + combined_wrestlers_df["Total Draws"]

combined_wrestlers_df
265/11:
# Create a new dataframe for those wrestlers who have wrestled at least 100 matches,
# have at least one win in 2013,
# and have at least one win in 2016
wrestled_over_hundred = combined_wrestlers_df.loc[(combined_wrestlers_df["Total Matches"] >= 100) &
                                                 (combined_wrestlers_df["2013 Wins"] > 0) &
                                                 (combined_wrestlers_df["2016 Wins"] > 0)]

# Set the index of this new dataframe to be the wrestlers names
wrestled_over_hundred = wrestled_over_hundred.set_index("Wrestler")

wrestled_over_hundred.head()
265/12:
# Collect the user's input to search through our data frame
wrestler_name = input("What wrestler's career would you like to look at?")
265/13:
# Create a series that looks for a wrestler by name and then traces their wins from 2013 to 2016
wins_over_time = wrestled_over_hundred.loc[wrestler_name,["2013 Wins","2014 Wins", "2015 Wins", "2016 Wins"]]

# Create a series that looks for a wrestler by name and then traces their losses from 2013 to 2016
losses_over_time = wrestled_over_hundred.loc[wrestler_name,["2013 Losses","2014 Losses",
                                                            "2015 Losses", "2016 Losses"]]
265/14:
# Create a list of the years that we will use as our x axis
years = [2013,2014,2015,2016]

# Plot our line that will be used to track a wrestler's wins over the years
plt.plot(years, wins_over_time, color="green", label="Wins")

# Plot our line that will be used to track a wrestler's losses over the years
plt.plot(years, losses_over_time, color="blue", label="Losses")

# Place a legend on the chart in what matplotlib believes to be the "best" location
plt.legend(loc="best")

plt.title(wrestler_name + "'s Recent Career")
plt.xlabel("Years")
plt.xticks(np.arange(min(years), max(years)+1, 1.0))
plt.ylabel("Number of Wins/Losses")

# Print our chart to the screen
plt.show()
276/1:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("%{:,.2f}".format)
summary_df
276/2:
# Dependencies
import pandas as pd
import numpy as np
276/3:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
276/4:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
276/5:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
276/6:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
276/7:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
276/8:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
276/9:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
276/10:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
276/11:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
276/12:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
276/13:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
276/14:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
276/15:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("%{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df
276/16:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("%{:,.2f}".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("%{:,.2f}".format)
summary_df
277/1:
# Dependencies
import pandas as pd
import numpy as np
281/1:
# Dependencies
import pandas as pd
import numpy as np
281/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
281/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
281/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
281/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
281/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
281/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
281/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
281/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
281/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
281/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
281/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
281/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
281/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("%{:,.2f}".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("%{:,.2f}".format)
summary_df
281/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
281/16:
# schools_overview_df = pd.DataFrames({"School Name": school_name,
                                   # "School Type": type,
                                    # "Total Students": size,
                                    # "Total School Budget": }
                                    
                                    # "Total Unique Authors": [author_count],
                              # "Earliest Year": earliest_year,
                              # "Latest Year": latest_year,
                              # "Total Reviews": total_reviews})
282/1:
# Dependencies
import pandas as pd
import numpy as np
282/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
282/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
282/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
282/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
282/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
282/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
282/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
282/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
282/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
282/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
282/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
282/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
282/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df
282/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
282/16:
# schools_overview_df = pd.DataFrames({"School Name": school_name,
                                   # "School Type": type,
                                    # "Total Students": size,
                                    # "Total School Budget": }
                                    
                                    # "Total Unique Authors": [author_count],
                              # "Earliest Year": earliest_year,
                              # "Latest Year": latest_year,
                              # "Total Reviews": total_reviews})
283/1:
# Dependencies
import pandas as pd
import numpy as np
283/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
283/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
283/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
283/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
283/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
283/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
283/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
283/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
283/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
283/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
283/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
283/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
283/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
283/15:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
284/1:
# Dependencies
import pandas as pd
import numpy as np
284/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
284/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
284/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
284/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
284/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
284/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
284/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
284/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
284/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
284/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
284/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
284/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
284/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
285/1:
# Dependencies
import pandas as pd
import numpy as np
285/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
285/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
285/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
285/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
285/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
285/7:
# Calculate Total Budget
total_budget = pycityschools_data_complete["budget"].sum()
total_budget
285/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
285/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
285/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
285/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
285/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
285/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of Students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
285/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
285/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
285/16:
# schools_overview_df = pd.DataFrames({"School Name": school_name,
                                   # "School Type": type,
                                    # "Total Students": size,
                                    # "Total School Budget": }
                                    
                                    # "Total Unique Authors": [author_count],
                              # "Earliest Year": earliest_year,
                              # "Latest Year": latest_year,
                              # "Total Reviews": total_reviews})
285/17:
# Calculate Total Budget
total_budget = pycityschools_data_df ["budget"].unique()
total_budget
285/18:
# Calculate Total Budget
total_budget = pycityschools_data_df ["budget"].sum()
total_budget
287/1:
# Dependencies
import pandas as pd
import numpy as np
287/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
287/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
287/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
287/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
287/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
287/7:
# Calculate Total Budget
total_budget = pycityschools_data_df ["budget"].sum()
total_budget
287/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
287/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
287/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
287/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
287/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
287/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of Students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
287/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("{:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
287/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
287/16: schools_overview_df = summary_df.groupby(["school_name"])
287/17:
schools_overview_group = summary_df.groupby(["school_name"])
schools_overview_group
287/18:
schools_overview_group = pycityschools_data_complete.groupby(["school_name"])
schools_overview_group.agg({"Student ID": "count"})
287/19:
schools_overview_group = pycityschools_data_complete.groupby(["school_name"])
schools_overview_group.agg({"Student ID": "count",
                            "budget": "max"})
287/20:
schools_overview_group = pycityschools_data_complete.groupby(["school_name"])
school_summary_df= schools_overview_group.agg({"Student ID": "count",
                            "budget": "max",
                           "math_score": "mean",
                            "reading_score": "mean",
                           })
school_summary_df
287/21:
schools_overview_group = pycityschools_data_complete.groupby(["school_name"])
school_summary_df = schools_overview_group.agg({"Student ID": "count",
                            "budget": "max",
                           "math_score": "mean",
                            "reading_score": "mean",
                           })
school_summary_df["Per Student Budget"] = school_summary_df["budget"] / school_summary_df["Student ID"]
287/22:
schools_overview_group = pycityschools_data_complete.groupby(["school_name"])
school_summary_df = schools_overview_group.agg({"Student ID": "count",
                            "budget": "max",
                           "math_score": "mean",
                            "reading_score": "mean",
                           })
school_summary_df["Per Student Budget"] = school_summary_df["budget"] / school_summary_df["Student ID"]
school_summary_df
287/23:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("${:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
288/1:
# Dependencies
import pandas as pd
import numpy as np
288/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
288/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
288/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
288/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
288/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
288/7:
# Calculate Total Budget
total_budget = pycityschools_data_df ["budget"].sum()
total_budget
288/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
288/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
288/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
288/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
288/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
288/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of Students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
288/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("${:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
288/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
288/16:
schools_overview_group = pycityschools_data_complete.groupby(["school_name"])
school_summary_df = schools_overview_group.agg({"Student ID": "count",
                            "budget": "max",
                           "math_score": "mean",
                            "reading_score": "mean",
                           })
school_summary_df["Per Student Budget"] = school_summary_df["budget"] / school_summary_df["Student ID"]
school_summary_df
288/17:
schools_overview_group = pycityschools_data_complete.groupby(["school_name"])
school_summary_df = schools_overview_group.agg({"Student ID": "count",
                            "budget": "max",
                           "math_score": "mean",
                            "reading_score": "mean",
                           })
school_summary_df["Per Student Budget"] = school_summary_df["budget"] / school_summary_df["Student ID"]
school_summary_df["% Passing Math"] = school_summary_df[math_score] >=70 / school_summary_df["Student ID"] * 100
school_summary_df
288/18:
schools_overview_group = pycityschools_data_complete.groupby(["school_name"])
school_summary_df = schools_overview_group.agg({"Student ID": "count",
                            "budget": "max",
                           "math_score": "mean",
                            "reading_score": "mean",
                           })
school_summary_df["Per Student Budget"] = school_summary_df["budget"] / school_summary_df["Student ID"]
school_summary_df["% Passing Math"] = school_summary_df["math_score"] >=70 / school_summary_df["Student ID"] * 100
school_summary_df
288/19:
passing_math_stu = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]
passing_math_stu
288/20:
group_school = pycityschools_data_complete.groupby(["school_name"]).count()
group_school.head()
288/21:
group_school = pycityschools_data_complete.groupby(["school_name"]).count()
group_school
288/22:
group_school = pycityschools_data_complete.groupby(["school_name"]).count()["type"]
group_school
288/23:
passing_math_count = pycityschools_data_complete.groupby(["school_name"]).count()["type"]
passing_math_count
288/24:
school_summary_df["% Passing Math"] = passing_math_count / school_summary_df["Student ID"]
school_summary_df
288/25:
passing_math_count = passing_math_stu.groupby(["school_name"]).count()["math_score"]
passing_math_count
288/26:
school_summary_df["% Passing Math"] = passing_math_count / school_summary_df["Student ID"]
school_summary_df
288/27:
school_summary_df["% Passing Math"] = passing_math_count / school_summary_df["Student ID"] * 100
school_summary_df
289/1:
# Dependencies
import pandas as pd
import numpy as np
289/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
289/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
289/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
289/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
289/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
289/7:
# Calculate Total Budget
total_budget = pycityschools_data_df ["budget"].sum()
total_budget
289/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
289/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
289/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
289/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
289/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
289/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of Students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
289/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("${:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
289/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
289/16:
schools_overview_group = pycityschools_data_complete.groupby(["school_name"])
school_summary_df = schools_overview_group.agg({"Student ID": "count",
                            "budget": "max",
                           "math_score": "mean",
                            "reading_score": "mean",
                           })
school_summary_df["Per Student Budget"] = school_summary_df["budget"] / school_summary_df["Student ID"]
school_summary_df
289/17:
passing_math_stu = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]
passing_math_stu
289/18:
passing_reading_stu = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]
passing_reading_stu
289/19:
passing_math_count = passing_math_stu.groupby(["school_name"]).count()["math_score"]
passing_math_count
289/20:
passing_reading_count = passing_reading_stu.groupby(["school_name"]).count()["reading_score"]
passing_reading_count
289/21:
school_summary_df["% Passing Math"] = passing_math_count / school_summary_df["Student ID"] * 100
school_summary_df["% Passing Reading"] = passing_reading_count / school_summary_df["School ID"] * 100
school_summary_df
289/22:
school_summary_df["% Passing Math"] = passing_math_count / school_summary_df["Student ID"] * 100
school_summary_df["% Passing Reading"] = passing_reading_count / school_summary_df["Student ID"] * 100
school_summary_df
289/23:
passing_overall_stu = pycityschools_data_complete.loc[(pycityschools_data_complete["math_score"] >=70)&
                                                  (pycityschools_data_complete["reading_score"] >=70)]
passing_overall_stu
289/24:
passing_reading_stu = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]
passing_reading_stu
289/25:
passing_math_count = passing_math_stu.groupby(["school_name"]).count()["math_score"]
passing_math_count
289/26:
passing_reading_count = passing_reading_stu.groupby(["school_name"]).count()["reading_score"]
passing_reading_count
289/27:
school_summary_df["% Passing Math"] = passing_math_count / school_summary_df["Student ID"] * 100
school_summary_df["% Passing Reading"] = passing_reading_count / school_summary_df["Student ID"] * 100
school_summary_df
290/1:
passing_overall_count = passing_overall_stu.groupby(["school_name"]).count()["reading_score", "math_score"]
passing_overall_count
291/1:
# Dependencies
import pandas as pd
import numpy as np
291/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
291/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
291/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
291/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
291/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
291/7:
# Calculate Total Budget
total_budget = pycityschools_data_df ["budget"].sum()
total_budget
291/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
291/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
291/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
291/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
291/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
291/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of Students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
291/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("${:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
291/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
291/16:
schools_overview_group = pycityschools_data_complete.groupby(["school_name"])
school_summary_df = schools_overview_group.agg({"Student ID": "count",
                            "budget": "max",
                           "math_score": "mean",
                            "reading_score": "mean",
                           })
school_summary_df["Per Student Budget"] = school_summary_df["budget"] / school_summary_df["Student ID"]
school_summary_df
291/17:
passing_math_stu = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]
passing_math_stu
291/18:
passing_overall_stu = pycityschools_data_complete.loc[(pycityschools_data_complete["math_score"] >=70)&
                                                  (pycityschools_data_complete["reading_score"] >=70)]
passing_overall_stu
291/19:
passing_reading_stu = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]
passing_reading_stu
291/20:
passing_math_count = passing_math_stu.groupby(["school_name"]).count()["math_score"]
passing_math_count
291/21:
passing_reading_count = passing_reading_stu.groupby(["school_name"]).count()["reading_score"]
passing_reading_count
291/22:
passing_overall_count = passing_overall_stu.groupby(["school_name"]).count()["reading_score", "math_score"]
passing_overall_count
291/23:
passing_overall_count = passing_overall_stu.groupby(["school_name"]).count()["reading_score"]
passing_overall_count
292/1:
# Dependencies
import pandas as pd
import numpy as np
292/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
292/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
292/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
292/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
292/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
292/7:
# Calculate Total Budget
total_budget = pycityschools_data_df ["budget"].sum()
total_budget
292/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
292/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
292/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
292/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
292/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
292/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of Students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
292/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("${:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
292/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
292/16:
schools_overview_group = pycityschools_data_complete.groupby(["school_name"])
school_summary_df = schools_overview_group.agg({"Student ID": "count",
                            "budget": "max",
                           "math_score": "mean",
                            "reading_score": "mean",
                           })
school_summary_df["Per Student Budget"] = school_summary_df["budget"] / school_summary_df["Student ID"]
school_summary_df
292/17:
passing_math_stu = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]
passing_math_stu
292/18:
passing_overall_stu = pycityschools_data_complete.loc[(pycityschools_data_complete["math_score"] >=70)&
                                                  (pycityschools_data_complete["reading_score"] >=70)]
passing_overall_stu
292/19:
passing_reading_stu = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]
passing_reading_stu
292/20:
passing_math_count = passing_math_stu.groupby(["school_name"]).count()["math_score"]
passing_math_count
292/21:
passing_reading_count = passing_reading_stu.groupby(["school_name"]).count()["reading_score"]
passing_reading_count
292/22:
passing_overall_count = passing_overall_stu.groupby(["school_name"]).count()["reading_score"]
passing_overall_count
292/23:
school_summary_df["% Passing Math"] = passing_math_count / school_summary_df["Student ID"] * 100
school_summary_df["% Passing Reading"] = passing_reading_count / school_summary_df["Student ID"] * 100
school_summary_df["% Passing Overall"] = passing_overall_count / school_summary_df["Student ID"] * 100
school_summary_df
292/24: school_summary_df = school_summary_df.rename(columns={"budget": "Total School Budget",}
292/25:
school_summary = pycityschools_data_complete.groupby(['school_name'])
school_summary
293/1:
# Dependencies
import pandas as pd
import numpy as np
293/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
293/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
293/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
293/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
293/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
293/7:
# Calculate Total Budget
total_budget = pycityschools_data_df ["budget"].sum()
total_budget
293/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
293/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
293/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
293/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
293/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
293/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of Students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
293/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("${:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
293/15:
# Create an overview table that summarizes key metrics about each school
    # School Name
    # School Type
    # Total Students
    # Total School Budget
    # Per Student Budget
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
293/16:
school_summary = pycityschools_data_complete.groupby(['school_name'])
school_summary
293/17:
passing_math_stu = pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]
passing_math_stu
293/18:
passing_overall_stu = pycityschools_data_complete.loc[(pycityschools_data_complete["math_score"] >=70)&
                                                  (pycityschools_data_complete["reading_score"] >=70)]
passing_overall_stu
293/19:
passing_reading_stu = pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]
passing_reading_stu
293/20:
passing_math_count = passing_math_stu.groupby(["school_name"]).count()["math_score"]
passing_math_count
293/21:
passing_reading_count = passing_reading_stu.groupby(["school_name"]).count()["reading_score"]
passing_reading_count
293/22:
passing_overall_count = passing_overall_stu.groupby(["school_name"]).count()["reading_score"]
passing_overall_count
293/23:
school_summary_df["% Passing Math"] = passing_math_count / school_summary_df["Student ID"] * 100
school_summary_df["% Passing Reading"] = passing_reading_count / school_summary_df["Student ID"] * 100
school_summary_df["% Passing Overall"] = passing_overall_count / school_summary_df["Student ID"] * 100
school_summary_df
293/24:
school_type = pycityschools_data_complete.set_index('school_name')['type']
school_type
293/25:
school_budget_total = pycityschools_data_complete.set_index('school_name')['budget']
school_budget_total
293/26:
# Per Student Budget
per_student_budget = pycityschools_data_complete.set_index('school_name')['budget'] / pycityschools_data_complete.set_index('school_name')['size']
per_student_budget
293/27:
# Total Students Per School
total_students = pycityschools_data_complete('Student ID').count()
total_students
293/28:
# Total Students Per School
total_students = summary_df('Student ID').count()
total_students
294/1:
# Dependencies
import pandas as pd
import numpy as np
294/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
294/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
294/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
294/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
294/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
294/7:
# Calculate Total Budget
total_budget = pycityschools_data_df ["budget"].sum()
total_budget
294/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
294/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
294/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
294/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
294/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
294/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of Students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
294/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("${:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
294/15:
# Create an overview table that summarizes key metrics about each school
    # Total Students
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
294/16:
# School Name
school_name = pycityschools_data_complete.groupby(['school_name'])
school_name
294/17:
# School Type
school_type = pycityschools_data_complete.set_index('school_name')['type']
school_type
294/18:
# Per School Budget 
school_budget_total = pycityschools_data_complete.set_index('school_name')['budget']
school_budget_total
294/19:
# Per Student Budget
per_student_budget = pycityschools_data_complete.set_index('school_name')['budget'] / pycityschools_data_complete.set_index('school_name')['size']
per_student_budget
294/20:
# Total Students Per School
total_students = summary_df('Student ID').count()
total_students
294/21:
# Total Students Per School
total_students = student_data_df('Student ID').count()
total_students
294/22:
# Total Students Per School
total_students = school_name('Student ID').count()
total_students
295/1:
# Dependencies
import pandas as pd
import numpy as np
295/2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
295/3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
295/4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
295/5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
295/6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
295/7:
# Calculate Total Budget
total_budget = pycityschools_data_df ["budget"].sum()
total_budget
295/8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
295/9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
295/10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
295/11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
295/12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
295/13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of Students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
295/14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("${:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
295/15:
# Create an overview table that summarizes key metrics about each school
    # Total Students
    # Average Math Score
    # Average Reading Score
    # % Passing Math
    # % Passing Reading
    # % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
295/16:
# School Name
school_name = pycityschools_data_complete.groupby(['school_name'])
school_name
295/17:
# School Type
school_type = pycityschools_data_complete.set_index('school_name')['type']
school_type
295/18:
# Per School Budget 
school_budget_total = pycityschools_data_complete.set_index('school_name')['budget']
school_budget_total
295/19:
# Per Student Budget
per_student_budget = pycityschools_data_complete.set_index('school_name')['budget'] / pycityschools_data_complete.set_index('school_name')['size']
per_student_budget
295/20:
# Total Students Per School
total_students = school_name('Student ID').count()
total_students
   1:
# Dependencies
import pandas as pd
import numpy as np
   2:
# load in file
pycityschools_file = "Resources/schools_complete.csv"
student_file = "Resources/students_complete.csv"
   3:
# Read School and Student Data File and store into Pandas DataFrames
pycityschools_data_df = pd.read_csv(pycityschools_file)
student_data_df = pd.read_csv(student_file)

pycityschools_data_df.head()
student_data_df.head()
   4:
pycityschools_data_complete = pd.merge(student_data_df, pycityschools_data_df, 
                                       on=["school_name", "school_name"], how="left")

pycityschools_data_complete.head()
   5:
# Count total schools
total_schools = len(pycityschools_data_complete["School ID"].unique())
total_schools
   6:
# Calculate the total number of students
total_students = len(pycityschools_data_complete["student_name"].unique())
total_students
   7:
# Calculate Total Budget
total_budget = pycityschools_data_df ["budget"].sum()
total_budget
   8:
# Calculate the average math score
average_mathscore = round(pycityschools_data_complete["math_score"].mean(), 2)
average_mathscore
   9:
# Calculate the average reading score
average_readingscore = round(pycityschools_data_complete["reading_score"].mean(), 2)
average_readingscore
  10:
# Calculate the percentage of students with a passing math score (70 or greater)
unique_math_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["math_score"] >=70]["student_name"].unique())
percent_math_passing = round((unique_math_passing/total_students)*100, 2)
percent_math_passing
  11:
# Calculate the percentage of students with a passing reading score (70 or greater)
unique_reading_passing = len(pycityschools_data_complete.loc[pycityschools_data_complete["reading_score"] >=70]["student_name"].unique())
percent_reading_passing = round((unique_reading_passing/total_students)*100, 2)
percent_reading_passing
  12:
# Calculate the percentage of students who passed math and reading (% Overall Passing)
overall_passing = round((percent_reading_passing + percent_math_passing) / 2, 2)
overall_passing
  13:
# Create a dataframe to hold the above results
summary_df = pd.DataFrame({"Total Schools": [total_schools],
                          "Total Students": [total_students],
                          "Total Budget": [total_budget],
                          "Average Math Score": [average_mathscore],
                          "Average Reading Score": [average_readingscore],
                          "% of Students with Passing Math Score": [percent_math_passing],
                          "% of Students with Passing Reading Score": [percent_reading_passing],
                          "% of Students with Passing Reading and Math Score": [overall_passing]
                          })
summary_df
  14:
# Give the displayed data cleaner formatting
summary_df["Total Students"] = summary_df["Total Students"].map("{:,.2f}".format)
summary_df["Total Budget"] = summary_df["Total Budget"].map("${:,.2f}".format)
summary_df["Average Math Score"] = summary_df["Average Math Score"].map("{:,.2f}%".format)
summary_df["Average Reading Score"] = summary_df["Average Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Math Score"] = summary_df["% of Students with Passing Math Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading Score"] = summary_df["% of Students with Passing Reading Score"].map("{:,.2f}%".format)
summary_df["% of Students with Passing Reading and Math Score"] = summary_df["% of Students with Passing Reading and Math Score"].map("{:,.2f}%".format)
summary_df
  15:
# Create an overview table that summarizes key metrics about each school
    # School Name
# School Type
# Total Students
# Total School Budget
# Per Student Budget
# Average Math Score
# Average Reading Score
# % Passing Math (The percentage of students that passed math.)
# % Passing Reading (The percentage of students that passed reading.)
# % Overall Passing (The percentage of students that passed math and reading.)
    
# Create a dataframe to hold the above results
  16:
school_summary_df = pycityschools_data_complete.group_by(["school_name"]).agg({"budget": "max",
                                                                              "size": "count",
                                                                              })
school_summary_df
  17:
school_summary_df = pycityschools_data_complete.group_by(["school_name"]).agg({"budget": ["max"],
                                                                              "size": ["count"],
                                                                              })
school_summary_df
  18: %history
  19: %history
  20: %history -g -f PyCitySchools
  21: %history -g -f PyCitySchools
  22: % history -g -f filename
  23: %history -g -f filename
  24: %history -g -f filename
  25: %history -g -f filename
